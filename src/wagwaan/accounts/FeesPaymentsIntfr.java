/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wagwaan.accounts;

import wagwaan.reports.FeesStatementPdf;
import wagwaan.config.AMSUtility;
import wagwaan.config.ConnectionDB;
import wagwaan.config.SQLHelper;
import wagwaan.config.TableModel;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author maurice
 */
public class FeesPaymentsIntfr extends javax.swing.JInternalFrame {
Connection con;

//jCheckBox1.setEnabled(false);
    /**
     * Creates new form PaymentsIntfr
     */
    public FeesPaymentsIntfr() {
        initComponents();
        con=ConnectionDB.getInstance().getCon();
//        jScrollPane1.setVisible(false);
        jPanel3.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new javax.swing.JTable();
        jButton521 = new javax.swing.JButton();
        jSearchDialog22 = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        jTextField1132 = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        jSearchTable22 = new javax.swing.JTable();
        jButton522 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog23 = new javax.swing.JDialog();
        jSearchPanel23 = new javax.swing.JPanel();
        jTextField1133 = new javax.swing.JTextField();
        jSearchScrollPane23 = new javax.swing.JScrollPane();
        jSearchTable23 = new javax.swing.JTable();
        jButton523 = new javax.swing.JButton();
        jSearchDialog24 = new javax.swing.JDialog();
        jSearchPanel24 = new javax.swing.JPanel();
        jTextField1134 = new javax.swing.JTextField();
        jSearchScrollPane24 = new javax.swing.JScrollPane();
        jSearchTable24 = new javax.swing.JTable();
        jButton524 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog25 = new javax.swing.JDialog();
        jSearchPanel25 = new javax.swing.JPanel();
        jTextField1135 = new javax.swing.JTextField();
        jSearchScrollPane25 = new javax.swing.JScrollPane();
        jSearchTable25 = new javax.swing.JTable();
        jButton525 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtnames = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtamountpayable = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtamountpaid = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtbalance = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        txtlocation = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        txtid = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jPanel43 = new javax.swing.JPanel();
        txtterm = new javax.swing.JTextField();
        searchButton3 = new javax.swing.JButton();
        comboclass = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtslipno1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        dateChooserField1 = new kiwi.ui.DateChooserField("dd-MM-yyyy");
        jLabel22 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        txtid1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtslipno = new javax.swing.JTextField();
        txtamountpaid1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtamountpayable1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtbalance1 = new javax.swing.JTextField();
        jPanel42 = new javax.swing.JPanel();
        txtnames1 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        dateChooserField2 = new kiwi.ui.DateChooserField("dd-MM-yyyy");
        jPanel44 = new javax.swing.JPanel();
        txtterm1 = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        comboclass1 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        txtnewbalance = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtclearance = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Close");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog22.setModal(true);
        jSearchDialog22.setUndecorated(true);
        jSearchDialog22.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        jTextField1132.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1132CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(jTextField1132, gridBagConstraints);

        jSearchTable22.setToolTipText("");
        jSearchTable22.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable22MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSearchTable22MouseEntered(evt);
            }
        });
        jSearchScrollPane22.setViewportView(jSearchTable22);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton522.setText("Close");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog22.getContentPane().add(jSearchPanel22, gridBagConstraints);

        jSearchDialog23.setModal(true);
        jSearchDialog23.setUndecorated(true);
        jSearchDialog23.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel23.setLayout(new java.awt.GridBagLayout());

        jTextField1133.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1133CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel23.add(jTextField1133, gridBagConstraints);

        jSearchTable23.setToolTipText("");
        jSearchTable23.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable23MouseClicked(evt);
            }
        });
        jSearchScrollPane23.setViewportView(jSearchTable23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel23.add(jSearchScrollPane23, gridBagConstraints);

        jButton523.setText("Close");
        jButton523.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton523ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel23.add(jButton523, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog23.getContentPane().add(jSearchPanel23, gridBagConstraints);

        jSearchDialog24.setModal(true);
        jSearchDialog24.setUndecorated(true);
        jSearchDialog24.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel24.setLayout(new java.awt.GridBagLayout());

        jTextField1134.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1134CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel24.add(jTextField1134, gridBagConstraints);

        jSearchTable24.setToolTipText("");
        jSearchTable24.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable24MouseClicked(evt);
            }
        });
        jSearchScrollPane24.setViewportView(jSearchTable24);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel24.add(jSearchScrollPane24, gridBagConstraints);

        jButton524.setText("Close");
        jButton524.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton524ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel24.add(jButton524, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog24.getContentPane().add(jSearchPanel24, gridBagConstraints);

        jSearchDialog25.setModal(true);
        jSearchDialog25.setUndecorated(true);
        jSearchDialog25.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel25.setLayout(new java.awt.GridBagLayout());

        jTextField1135.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1135CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel25.add(jTextField1135, gridBagConstraints);

        jSearchTable25.setToolTipText("");
        jSearchTable25.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable25MouseClicked(evt);
            }
        });
        jSearchScrollPane25.setViewportView(jSearchTable25);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel25.add(jSearchScrollPane25, gridBagConstraints);

        jButton525.setText("Close");
        jButton525.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton525ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jSearchPanel25.add(jButton525, gridBagConstraints);

        jLabel24.setText("PLEASE SELECT THE RESIDENCE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        jSearchPanel25.add(jLabel24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog25.getContentPane().add(jSearchPanel25, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("FEES PAYMENTS");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setForeground(new java.awt.Color(153, 0, 0));
        jLabel1.setText("Current Term");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Student ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setForeground(new java.awt.Color(153, 0, 0));
        jLabel3.setText("Student Names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel3, gridBagConstraints);

        txtnames.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtnames, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Amount Payable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanel1.add(jLabel5, gridBagConstraints);

        txtamountpayable.setEditable(false);
        txtamountpayable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtamountpayable.setForeground(new java.awt.Color(0, 0, 255));
        txtamountpayable.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtamountpayable, gridBagConstraints);

        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("Amount Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        jPanel1.add(jLabel6, gridBagConstraints);

        txtamountpaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtamountpaidKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtamountpaid, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        jPanel1.add(jLabel7, gridBagConstraints);

        txtbalance.setEditable(false);
        txtbalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtbalance.setForeground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtbalance, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Payment Mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel5.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("Money Order");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jRadioButton4, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Cheque");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jRadioButton2, gridBagConstraints);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Bank Slip");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jRadioButton3, gridBagConstraints);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Cash");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jRadioButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Payment Selections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jCheckBox5.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox5.setText("Swimming");
        jCheckBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox5ItemStateChanged(evt);
            }
        });
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox5, gridBagConstraints);

        jCheckBox6.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox6.setText("Uniform");
        jCheckBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox6ItemStateChanged(evt);
            }
        });
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox6, gridBagConstraints);

        jCheckBox2.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox2.setText("Lunch");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox2, gridBagConstraints);

        jCheckBox1.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox1.setText("Tuition");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox1, gridBagConstraints);

        jCheckBox3.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox3.setText("Tea/Milk");
        jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox3ItemStateChanged(evt);
            }
        });
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox4.setText("Extra-Tuition");
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox4ItemStateChanged(evt);
            }
        });
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox4, gridBagConstraints);

        jCheckBox7.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox7.setText("Diary");
        jCheckBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox7ItemStateChanged(evt);
            }
        });
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox7, gridBagConstraints);

        jCheckBox8.setForeground(new java.awt.Color(0, 0, 102));
        jCheckBox8.setText("Transport");
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox8, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        txtlocation.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(txtlocation, gridBagConstraints);

        jLabel23.setForeground(new java.awt.Color(51, 51, 255));
        jLabel23.setText("Location Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel23, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 2.0;
        jPanel6.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButton2.setText("RESET");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jButton2, gridBagConstraints);

        jButton3.setText("CLOSE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jButton3, gridBagConstraints);

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel7, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        txtid.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(txtid, gridBagConstraints);

        searchButton1.setToolTipText("Search");
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton1.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel41.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel1.add(jPanel41, gridBagConstraints);

        jPanel43.setLayout(new java.awt.GridBagLayout());

        txtterm.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel43.add(txtterm, gridBagConstraints);

        searchButton3.setToolTipText("Search");
        searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton3.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton3.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel43.add(searchButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel1.add(jPanel43, gridBagConstraints);

        comboclass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "BABY CLASS", "NURSERY", "PRE-UNIT", "STD. 1", "STD. 2", "STD. 3", "STD. 4", "STD. 5", "STD. 6", "STD. 7", "STD. 8" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel1.add(comboclass, gridBagConstraints);

        jLabel11.setText("Slip No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel11, gridBagConstraints);

        txtslipno1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtslipno1, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(153, 0, 0));
        jLabel12.setText("Payment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        jPanel1.add(dateChooserField1, gridBagConstraints);

        jLabel22.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(51, 51, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        jPanel1.add(jLabel22, gridBagConstraints);

        jLabel26.setText("Receipt No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel1.add(jLabel26, gridBagConstraints);

        jTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel25.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        jPanel1.add(jLabel25, gridBagConstraints);

        jTabbedPane1.addTab("Initital Term Payments", jPanel1);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jButton4.setText("CLOSE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton4, gridBagConstraints);

        jButton5.setText("RESET");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton5, gridBagConstraints);

        jButton6.setText("SAVE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel8.add(jPanel9, gridBagConstraints);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Payment Mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel10.setForeground(new java.awt.Color(0, 0, 255));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("Money Order");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jRadioButton5, gridBagConstraints);

        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setText("Cheque");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jRadioButton6, gridBagConstraints);

        buttonGroup2.add(jRadioButton7);
        jRadioButton7.setText("Bank Slip");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jRadioButton7, gridBagConstraints);

        buttonGroup2.add(jRadioButton8);
        jRadioButton8.setText("Cash");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jRadioButton8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel8.add(jPanel10, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        txtid1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtid1, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Current Term");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        jLabel17.setForeground(new java.awt.Color(255, 0, 0));
        jLabel17.setText("Amount Payable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel17, gridBagConstraints);

        jLabel19.setText("Slip No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel19, gridBagConstraints);

        jLabel21.setForeground(new java.awt.Color(255, 0, 0));
        jLabel21.setText("Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel21, gridBagConstraints);

        txtslipno.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtslipno, gridBagConstraints);

        txtamountpaid1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtamountpaid1, gridBagConstraints);

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("Class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        txtamountpayable1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtamountpayable1, gridBagConstraints);

        jLabel18.setForeground(new java.awt.Color(255, 0, 0));
        jLabel18.setText("Clearance Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel18, gridBagConstraints);

        jLabel16.setForeground(new java.awt.Color(255, 0, 0));
        jLabel16.setText("Amount Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel16, gridBagConstraints);

        txtbalance1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtbalance1, gridBagConstraints);

        jPanel42.setLayout(new java.awt.GridBagLayout());

        txtnames1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel42.add(txtnames1, gridBagConstraints);

        searchButton2.setToolTipText("Search");
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton2.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel42.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jPanel42, gridBagConstraints);

        jLabel20.setForeground(new java.awt.Color(255, 0, 0));
        jLabel20.setText("Clearance Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel20, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("New Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel13, gridBagConstraints);

        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("Student Names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(dateChooserField2, gridBagConstraints);

        jPanel44.setLayout(new java.awt.GridBagLayout());

        txtterm1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel44.add(txtterm1, gridBagConstraints);

        searchButton4.setToolTipText("Search");
        searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton4.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton4.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel44.add(searchButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jPanel44, gridBagConstraints);

        comboclass1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BABY CLASS", "NURSERY", "PRE-UNIT", "STD. 1", "STD. 2", "STD. 3", "STD. 4", "STD. 5", "STD. 6", "STD. 7", "STD. 8" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(comboclass1, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jTextField2, gridBagConstraints);

        txtnewbalance.setEditable(false);
        txtnewbalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtnewbalance.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtnewbalance, gridBagConstraints);

        jLabel27.setText("Receipt No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel27, gridBagConstraints);

        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("Student ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel15, gridBagConstraints);

        txtclearance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtclearanceKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(txtclearance, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        jPanel2.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Arrears Clearance", jPanel8);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void dbConnection(){
        try {
            Class.forName("org.postgresql.Driver");
            con=null;
            String url="jdbc:postgresql://localhost:5432/systems";
            con=DriverManager.getConnection(url, "postgres", "muscielargo");
            if(con!=null)
                System.out.println("Connection successful");
            else
                System.out.println("Unable to Connect");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        AMSUtility.showSearchDialog(txtid, jSearchDialog21);
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        AMSUtility.showSearchDialog(txtterm, jSearchDialog22);
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        if(jTextField1131.getCaretPosition()>3){
        jSearchTable21.setModel(TableModel.createTableVectors(con, "select student_id, first_name ||' ' || middle_name ||' '|| last_name as names, students_class from student_registration where first_name ||' '||middle_name ||' '||last_name ilike '%"+jTextField1131.getText()+"%' "));
        jSearchScrollPane21.setViewportView(jSearchTable21);
        }
    }//GEN-LAST:event_jTextField1131CaretUpdate
    /*   private void selections(){
            if(jCheckBox1.isSelected()){
//            jTextArea1.setText("    "+jCheckBox1.getText()+"   ");
            }
            if(jCheckBox2.isSelected()){
            jTextArea1.setText("    "+jCheckBox2.getText()+"   ");
            }
            if(jCheckBox1.isSelected()){
            jTextArea1.setText("    "+jCheckBox3.getText()+"   ");
            }
            if(jCheckBox4.isSelected()){
            jTextArea1.setText("    "+jCheckBox4.getText()+"   ");
            }
            if(jCheckBox5.isSelected()){
            jTextArea1.setText("    "+jCheckBox5.getText()+"   ");
            }
            if(jCheckBox6.isSelected()){
            jTextArea1.setText("    "+jCheckBox6.getText()+"   ");
            }
            if(jCheckBox7.isSelected()){
            jTextArea1.setText("    "+jCheckBox7.getText()+"   ");
            }
            if(jCheckBox8.isSelected()){
            jTextArea1.setText("    "+jCheckBox8.getText()+"   ");
            }
        }*/
        
    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        txtid.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        txtnames.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        comboclass.setSelectedItem(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());
        jSearchDialog21.dispose();

    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jTextField1132CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1132CaretUpdate
        if(jTextField1132.getCaretPosition()>2){
        jSearchTable22.setModel(TableModel.createTableVectors(con, "SELECT distinct(term), class  FROM fees_setup where term ilike '"+jTextField1132.getText()+"' and class='"+comboclass.getSelectedItem()+"' "));
        jSearchScrollPane22.setViewportView(jSearchTable22);
        }
    }//GEN-LAST:event_jTextField1132CaretUpdate
public String getID(){
String id=null;

        try {
            ResultSet rs=SQLHelper.getResultset(con, "SELECT 'SLIP_NO'|| nextval('slip_no_seq')");
            while(rs.next()){
                id=rs.getString(1);
    }
        } catch (SQLException ex) { 
        }
    
return id;
}
    private void jSearchTable22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable22MouseClicked
        txtterm.setText(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 0).toString());
        jSearchDialog22.dispose();
            
            String current_term=txtterm.getText();
            String t=current_term.substring(0, 1);
            String y=current_term.substring(2, 4);
            String current_class=comboclass.getSelectedItem().toString();
            String int_class=null;
            String prev_term=null;
            
            if(current_class.equals("STD. 1")){
                        if(t.equals(String.valueOf(1))){
                            prev_term= String.valueOf((Integer.valueOf(t)+2)+"/"+(Integer.valueOf(y)-1));
                            int_class="PRE-UNIT";
                        }
                        if(t.equals(String.valueOf(2))){
                            prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                            int_class=current_class;
                        }
                        if(t.equals(String.valueOf(3))){
                            prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                            int_class=current_class;
                        }
            }
            
            if(current_class.startsWith("S") &&!(current_class.equals("STD. 1"))){
                
                int_class=current_class.substring(5, 6);
                
                            if(t.equals(String.valueOf(1))){
                                prev_term= String.valueOf((Integer.valueOf(t)+2)+"/"+(Integer.valueOf(y)-1));
                                int_class=String.valueOf("STD. "+(Integer.parseInt(int_class)-1));
                            }
                            if(t.equals(String.valueOf(2))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
                            if(t.equals(String.valueOf(3))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
            }
            
            
            if(current_class.startsWith("P")){
                            if(t.equals(String.valueOf(1))){
                                prev_term= String.valueOf((Integer.valueOf(t)+2)+"/"+(Integer.valueOf(y)-1));
                                int_class="NURSERY";
                            }
                            if(t.equals(String.valueOf(2))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
                            if(t.equals(String.valueOf(3))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
            }
            
            
            if(current_class.startsWith("N")){
                            if(t.equals(String.valueOf(1))){
                                prev_term= String.valueOf((Integer.valueOf(t)+2)+"/"+(Integer.valueOf(y)-1));
                                int_class="BABY CLASS";
                            }
                            if(t.equals(String.valueOf(2))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
                            if(t.equals(String.valueOf(3))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
            }
            
            if(current_class.startsWith("B")){
                            
                            if(t.equals(String.valueOf(2))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
                            if(t.equals(String.valueOf(3))){
                                prev_term= String.valueOf((Integer.valueOf(t)-1)+"/"+(Integer.valueOf(y)));
                                int_class=current_class;
                            }
            }
            double difference=0.00;
            System.out.println("Prev term: "+prev_term);
            System.out.println("classs: "+int_class);
            try {
                ResultSet pay=SQLHelper.getResultset(con, "select credit-debit from fees_ledger where student_id='"+txtid.getText()+"' and current_term='"+prev_term+"' and current_class='"+int_class+"'");
                while(pay.next()){
                difference=pay.getDouble(1);
                }
                if(difference==0.00){
                    txtamountpayable.setText(""+0.00+"");
                }
                else if(difference>0.00){
                    txtamountpayable.setText(""+difference+"");
                jLabel25.setText("PLEASE NOTE THAT THIS STUDENT HAD ARREARS FROM THE PREVIOUS TERM");
                }
                else{
                txtamountpayable.setText(""+difference+"");
                jLabel25.setText("PLEASE NOTE THAT THIS STUDENT HAD AN OVERPAYMENT FROM THE PREVIOUS TERM");
                }
                } catch (SQLException ex) {
            Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*Statement st=null;
        String sql=null;
        double tution=0;
        double transport=0;
        double extra_tution=0;
        double swimming=0;
        double diary=0;
        double tea=0;
        double uniform=0;
        sql="SELECT  transport_fees, extra_tution, swimming_fees, diary_fees, tea/milk_fees, uniform_fees  FROM term_fees_setup where current_class = '"+comboclass.getSelectedItem().toString()+"'";
        */
        /*
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
                txttransport.setText(rs.getString(1));
                transport=rs.getDouble(1);
                txtextratution.setText(rs.getString(2));
                extra_tution=rs.getDouble(2);
                txtswimming.setText(rs.getString(3));
                swimming=rs.getDouble(3);
                txtdiary.setText(rs.getString(4));
                diary=rs.getDouble(4);
                txtmilk.setText(rs.getString(5));
                tea=rs.getDouble(5);
                txtuniform.setText(rs.getString(6));
                uniform=rs.getDouble(6);
            }
            double total=transport+extra_tution+swimming+diary+tea+uniform;
            txttotalamount.setText(String.valueOf(total));
        /*Statement st=null;
        String sql=null;
        double tution=0;
        double transport=0;
        double extra_tution=0;
        double swimming=0;
        double diary=0;
        double tea=0;
        double uniform=0;
        sql="SELECT  transport_fees, extra_tution, swimming_fees, diary_fees, tea/milk_fees, uniform_fees  FROM term_fees_setup where current_class = '"+comboclass.getSelectedItem().toString()+"'";
        */
    }//GEN-LAST:event_jSearchTable22MouseClicked

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed
        jSearchDialog22.dispose();
    }//GEN-LAST:event_jButton522ActionPerformed
    private void tutionActivation(){
    String sql=null;
    
    double tution=0;
                sql="select amount from fees_setup where class ilike '"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'tuition%' ";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        tution=rs.getDouble(1);
        }
        if(txtamountpayable.getText().isEmpty()){
        txtamountpayable.setText(""+tution+"");
        }
        else{
        double existing=Double.parseDouble(txtamountpayable.getText());
        double newAmount=existing+tution;
        txtamountpayable.setText(String.valueOf(newAmount));
        }
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
                
    }
    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged

    }//GEN-LAST:event_jCheckBox1ItemStateChanged
    private void lunchActivation(){
    
    String sql=null;
    double lunch=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'lunch%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        lunch=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=lunch+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void lunchDeactivation(){
    
    String sql=null;
    double lunch=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'lunch%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        lunch=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-lunch;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged

    }//GEN-LAST:event_jCheckBox2ItemStateChanged
    private void teaActivation(){
    
    String sql=null;
    double tea=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'tea%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        tea=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=tea+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void teaDeactivation(){
    
    String sql=null;
    double tea=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'tea%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        tea=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-tea;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox3ItemStateChanged

    }//GEN-LAST:event_jCheckBox3ItemStateChanged
    private void extraDeactivation(){
    
    String sql=null;
    double extra=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"'  and payable ilike 'extra%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        extra=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-extra;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private void extraActivation(){
    
    String sql=null;
    double extra=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'extra%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        extra=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=extra+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private void jCheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox4ItemStateChanged

    }//GEN-LAST:event_jCheckBox4ItemStateChanged
        private void swimActivation(){
        
    String sql=null;
    double swim=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'swim%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        swim=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=swim+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
        }
        private void swimDeactivation(){
        
    String sql=null;
    double swim=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'swim%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        swim=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-swim;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
        }
    private void jCheckBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox5ItemStateChanged

    }//GEN-LAST:event_jCheckBox5ItemStateChanged
    private void uniformDeactivation(){
    
    String sql=null;
    double uniform=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"'  and term='"+txtterm.getText()+"' and payable ilike 'uniform%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        uniform=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-uniform;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private void uniformActivation(){
        
    String sql=null;
    double uniform=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"'  and term='"+txtterm.getText()+"' and payable ilike 'uniform%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        uniform=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=uniform+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox6ItemStateChanged

    }//GEN-LAST:event_jCheckBox6ItemStateChanged
    private void diaryActivation(){
        
    String sql=null;
    double diary=0;
    double existing=0;
    sql="select amount from fees_setup where class='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'diary%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        diary=rs.getDouble(1);
        }
        existing=Double.parseDouble(txtamountpayable.getText());
        if(!txtamountpayable.getText().isEmpty()){
        double newAmount=diary+existing;
        txtamountpayable.setText(""+newAmount+"");
        }
        
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void diaryDeactivation(){
    
    String sql=null;
    double diary=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"'  and term='"+txtterm.getText()+"' and payable ilike 'diary%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        diary=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-diary;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox7ItemStateChanged

    }//GEN-LAST:event_jCheckBox7ItemStateChanged

    private void txtclearanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtclearanceKeyReleased
Character z=evt.getKeyChar();
        if(!Character.isDigit(z)){
        JOptionPane.showMessageDialog(this, "Clearance Amount cannot contain alphabets");
        txtclearance.setText("");
        }
        double new_balance=0;
        double balance=Double.parseDouble(txtbalance1.getText());
        new_balance=balance-Double.parseDouble(txtclearance.getText());
        txtnewbalance.setText(""+new_balance+"");
        if(new_balance==0.0){
        jLabel10.setText("FEES IS FULLY PAID");
        jLabel10.setForeground(Color.red);
        }
        else if(new_balance<0){
        jLabel10.setText("");
        jLabel10.setText("YOU HAVE AN OVERPAYMENT");
        jLabel10.setForeground(Color.blue);
        }

    }//GEN-LAST:event_txtclearanceKeyReleased

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        AMSUtility.showSearchDialog(txtnames1, jSearchDialog24);
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1133CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1133CaretUpdate
        if(jTextField1133.getCaretPosition()>1){

            jSearchTable23.setModel(TableModel.createTableVectors(con, "select distinct(term) from fees_setup where class='"+comboclass1.getSelectedItem()+"' "));
            jSearchScrollPane23.setViewportView(jSearchTable23);

        }
    }//GEN-LAST:event_jTextField1133CaretUpdate

    private void jSearchTable23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable23MouseClicked
        txtterm1.setText(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 0).toString());
        jSearchDialog23.dispose();
/*
        double amountpayable=Double.parseDouble(txtamountpayable.getText());
        double amountpaid=Double.parseDouble(txtamountpaid.getText());
        double balance=amountpayable-amountpaid;
        txtbalance.setText(""+balance+"");*/
    }//GEN-LAST:event_jSearchTable23MouseClicked

    private void jButton523ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton523ActionPerformed
        jSearchDialog23.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton523ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
                if(jCheckBox1.isSelected()){
//                    jTextArea1.setText("    "+jCheckBox1.getText()+"    ");
        tutionActivation();
                }
                else if(!jCheckBox1.isSelected()){
                tutionDeactivation();
                }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    private void tutionDeactivation(){
    String sql=null;
    double tution=0;
    sql="select amount from fees_setup where class ='"+comboclass.getSelectedItem()+"' and term='"+txtterm.getText()+"' and payable ilike 'tuition%'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        tution=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-tution;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
                if(jCheckBox2.isSelected()){
        lunchActivation();
//        jTextArea1.setText("  "+jCheckBox2.getText()+"  ");
        }
        else if(!jCheckBox2.isSelected()){
            lunchDeactivation();
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
                if(jCheckBox3.isSelected()){
//        jTextArea1.setText("  "+jCheckBox3.getText()+"  ");
        teaActivation(); 
                }
        else if(!jCheckBox3.isSelected()){
        teaDeactivation();
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
                if(jCheckBox4.isSelected()){
//                    jTextArea1.setText("  "+jCheckBox4.getText()+"  ");
        extraActivation();
        }
        else if(!jCheckBox4.isSelected()){
        extraDeactivation();
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
                if(jCheckBox5.isSelected()){
        swimActivation();
//        jTextArea1.setText("  "+jCheckBox5.getText()+"  ");
        }
        else if(!jCheckBox5.isSelected()){
        swimDeactivation();
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
                if(jCheckBox6.isSelected()){
//                    jTextArea1.setText("  "+jCheckBox6.getText()+"  ");
            uniformActivation();
        }
        else if(!jCheckBox6.isSelected()){
        uniformDeactivation();
        }
    }//GEN-LAST:event_jCheckBox6ActionPerformed
    public String payables(){
        String concat=null;
        String check1=" ", check2=" ", check3=" ", check4=" ", check5=" ", check6=" ", check7=" ", check8=" ";
    if(jCheckBox1.isSelected())
    check1=jCheckBox1.getText();
    
    if(jCheckBox2.isSelected())
    check2=jCheckBox2.getText();
    
    if(jCheckBox3.isSelected())
    check3=jCheckBox3.getText();
    
    if(jCheckBox4.isSelected())
    check4=jCheckBox4.getText();
    
    if(jCheckBox5.isSelected())
    check5=jCheckBox5.getText();
    
    if(jCheckBox6.isSelected())
    check6=jCheckBox6.getText();
    
    if(jCheckBox7.isSelected())
    check7=jCheckBox7.getText();
    
    if(jCheckBox8.isSelected())
    check8=jCheckBox8.getText();
    
     concat=check1+" "+check2+" "+check3+" "+check4+" "+check5+" "+check6+" "+check7+" "+check8;
     return concat;
    }
    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
                if(jCheckBox7.isSelected()){
//                    jTextArea1.setText("  "+jCheckBox7.getText()+"  ");
        diaryActivation();
        }
        else if(!jCheckBox7.isSelected()){
        diaryDeactivation();
        }
    }//GEN-LAST:event_jCheckBox7ActionPerformed
    private void transportActivation(){
    String sql=null;
    
    double trans=0;
                sql="select fees from location where location_name = '"+txtlocation.getText()+"' and current_term_id='"+txtterm.getText()+"'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        trans=rs.getDouble(1);
        }
        if(txtamountpayable.getText().isEmpty()){
        txtamountpayable.setText(""+trans+"");
        }
        else{
        double existing=Double.parseDouble(txtamountpayable.getText());
        double newAmount=existing+trans;
        txtamountpayable.setText(String.valueOf(newAmount));
        }
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void transportDeactivation(){
    
    String sql=null;
    double trans=0;
    sql="select fees from location where location_name = '"+txtlocation.getText()+"' and current_term_id='"+txtterm.getText()+"'";
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery(sql);
        while(rs.next()){
        trans=rs.getDouble(1);
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double new_amount=amount_payable-trans;
        txtamountpayable.setText(""+new_amount+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        if(jCheckBox8.isSelected()){
            jPanel3.setVisible(true);
            java.awt.Point point=jCheckBox8.getLocationOnScreen();
            jSearchDialog25.setSize(400, 200);
            jSearchDialog25.setLocation(point);
            jSearchDialog25.setVisible(true);
        transportActivation();
        }
        else if(!jCheckBox8.isSelected()){
            transportDeactivation();
            jPanel3.setVisible(false);
        
        }
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void txtamountpaidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtamountpaidKeyReleased
    Character z=evt.getKeyChar();
        if(!Character.isDigit(z)){
        JOptionPane.showMessageDialog(this, "amount paid. cannot contain alphabets");
        txtamountpaid.setText("");
        }
        double amount_payable=Double.parseDouble(txtamountpayable.getText());
        double amount_paid=Double.parseDouble(txtamountpaid.getText());
        double balance=amount_payable-amount_paid;
        txtbalance.setText(""+balance+"");
        if(balance<=0.0){
        jLabel22.setText("FEES IS FULLY PAID");
        }
        else{
        jLabel22.setText("");
        }
    }//GEN-LAST:event_txtamountpaidKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        validateSavedData();
    }//GEN-LAST:event_jButton1ActionPerformed
    private void resetDetails(){
    txtid.setText("");
    txtnames.setText("");
    txtterm.setText("");
    comboclass.setSelectedItem(null);
    txtamountpaid.setText("");
//    txtamountpayable.setText("");
    txtslipno.setText("");
    jTextField1.setText("");
    jCheckBox1.setSelected(false);
    jCheckBox2.setSelected(false);
    jCheckBox3.setSelected(false);
    jCheckBox4.setSelected(false);
    jCheckBox5.setSelected(false);
    jCheckBox6.setSelected(false);
    jCheckBox7.setSelected(false);
    jCheckBox8.setSelected(false);
    buttonGroup1.clearSelection();
    txtamountpayable.setText(""+0.00+"");
    txtamountpaid.setText("");
    txtbalance.setText("");
    jLabel22.setText("");
    jLabel25.setText("");
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        resetDetails();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        AMSUtility.showSearchDialog(txtterm1, jSearchDialog23);
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void jTextField1134CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1134CaretUpdate
        if(jTextField1134.getCaretPosition()>3){
        jSearchTable24.setModel(TableModel.createTableVectors(con, "select f.student_id,st.first_name||' '||middle_name||' '||last_name as names from fees_ledger f, student_registration st where credit>debit and st.first_name||' '||middle_name||' '||last_name ilike '%"+jTextField1134.getText()+"%' and f.current_term='"+txtterm1.getText()+"' and f.current_class='"+comboclass1.getSelectedItem()+"'"));
        jSearchScrollPane24.setViewportView(jSearchTable24);
        }
    }//GEN-LAST:event_jTextField1134CaretUpdate

    private void jSearchTable24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable24MouseClicked
        txtid1.setText(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 0).toString());
        txtnames1.setText(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 1).toString());
        jSearchDialog24.dispose();
        double debit=0;
        double credit=0;
        double balance=0;
    try {
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery("select slip_no, debit, credit from fees_ledger where student_id='"+txtid1.getText()+"' and current_term='"+txtterm1.getText()+"' and current_class='"+comboclass1.getSelectedItem()+"' ");
        while(rs.next()){
        txtslipno.setText(rs.getString(1));
        txtamountpaid1.setText(rs.getString(2));
        txtamountpayable1.setText(rs.getString(3));
        }
        credit=Double.parseDouble(txtamountpayable1.getText());
        debit=Double.parseDouble(txtamountpaid1.getText());
        
        balance=credit-debit;
        txtbalance1.setText(""+balance+"");
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jSearchTable24MouseClicked

    private void jButton524ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton524ActionPerformed
        jSearchDialog24.dispose();
    }//GEN-LAST:event_jButton524ActionPerformed
    private void validateSavingandUpdating(){
    if(comboclass1.getSelectedItem()==null){
    JOptionPane.showMessageDialog(this, "Please select the student's current class", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtterm1.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student's term", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtid1.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student's ID", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtnames1.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student's Names", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtslipno.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student's Slip No.", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(dateChooserField2.getDate()==null){
    JOptionPane.showMessageDialog(this, "Please input the clearance date", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtamountpaid1.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the current amount paid", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtamountpayable1.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the amount to be paid", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(txtclearance.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please input the student's clearance amount", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(buttonGroup2.getSelection()==null){
    JOptionPane.showMessageDialog(this, "Please select the payment mode", "Information Missing!!!", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    insertAndUpdate();
    }
    
    private void insertAndUpdate(){
    double debit=0;
    double credit=0;
    String payables=null;
    try {
        con.setAutoCommit(false);
        Statement st=con.createStatement();
        ResultSet rs=st.executeQuery("select debit, credit, payables from fees_ledger where student_id='"+txtid1.getText()+"' and current_term='"+txtterm1.getText()+"' and current_class='"+comboclass1.getSelectedItem()+"'  ");
        while(rs.next()){
        debit=rs.getDouble(1);
        credit=rs.getDouble(2);
        payables=rs.getString(3);
        }
        int option=JOptionPane.showConfirmDialog(this, "Are you sure you want to save the update the fees payments\n for "+txtnames1.getText()+"\n for the class "+comboclass1.getSelectedItem()+"\n and term "+txtterm1.getText()+" ?", "Caution before Saving!!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(option==JOptionPane.YES_OPTION){
        PreparedStatement pr=null;
        String sql=null;
        double clearance=Double.parseDouble(txtclearance.getText());
        
        sql="update fees_ledger set debit=? where current_term='"+txtterm1.getText()+"' and current_class='"+comboclass1.getSelectedItem()+"'  and student_id='"+txtid1.getText()+"' ";
        pr=con.prepareStatement(sql);
        pr.setObject(1, debit+clearance);
        pr.executeUpdate();
        if(pr!=null){
        System.out.println("Updating the debit amount was ok");
        }
        String receiptNo=null;
        sql="INSERT INTO fees_mgt(slip_no, student_id, current_term_id, current_class, payables, receipt_no, paid, balance, payment_date, payment_mode)\n" +
"    VALUES (?, ?, ?, ?, ?, ?, ?::numeric(10, 2), ?::numeric(10, 2), ?::date, ?)";
               ResultSet rs2=SQLHelper.getResultset(con, "SELECT 'REC'|| nextval('receipt_no_seq')");
            while(rs2.next()){
              receiptNo=rs2.getString(1);
    }
            pr=con.prepareStatement(sql);
            pr.setString(1, txtslipno.getText());
            pr.setString(2, txtid1.getText());
            pr.setString(3, txtterm1.getText());
            pr.setString(4, comboclass1.getSelectedItem().toString());
            pr.setString(5, payables);
            pr.setString(6, receiptNo);
            pr.setString(7, txtclearance.getText());
            pr.setString(8, txtnewbalance.getText());
            pr.setObject(9, dateChooserField2.getDate().toString());
            pr.setString(10, payments());
            pr.executeUpdate();
    
        
        
        Statement st1=con.createStatement();
        ResultSet rs1=st1.executeQuery("select debit from fees_ledger where student_id='"+txtid1.getText()+"' and current_term='"+txtterm1.getText()+"' and current_class='"+comboclass1.getSelectedItem()+"'  ");
        double newDebit=0;
        while(rs1.next()){
        newDebit=rs1.getDouble(1);
        }
        if(newDebit==(debit+clearance)){
        System.out.println("Update iko tu sawa");
        JOptionPane.showMessageDialog(this, "Insert is Successful");
        FeesStatementPdf fees=new FeesStatementPdf();
       fees.FeesStatementPdf(con, String.valueOf(txtterm1.getText()), String.valueOf(comboclass1.getSelectedItem()), String.valueOf(txtid1.getText()));
        resetDetails2();
        con.commit();
        con.setAutoCommit(true);
        }
        
        }
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        try {
            con.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex1);
        }
    }
    }
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        validateSavingandUpdating();
    }//GEN-LAST:event_jButton6ActionPerformed
    private void resetDetails2(){
    txtid1.setText("");
    txtnames1.setText("");
    txtterm1.setText("");
    comboclass1.setSelectedItem(null);
    txtamountpaid1.setText("");
    txtamountpayable1.setText("");
    txtslipno.setText("");
    jTextField2.setText("");
    buttonGroup2.clearSelection();
    txtamountpayable1.setText(""+0.00+"");
    txtamountpaid1.setText("");
    txtbalance1.setText("");
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
resetDetails2();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1135CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1135CaretUpdate
        if(jTextField1135.getCaretPosition()>3){
        jSearchTable25.setModel(TableModel.createTableVectors(con, "select location_id, location_name, fees from location where location_name ilike '%"+jTextField1135.getText()+"%' and current_term_id ='"+txtterm.getText()+"' "));
        jSearchScrollPane25.setViewportView(jSearchTable25);
        }
    }//GEN-LAST:event_jTextField1135CaretUpdate

    private void jSearchTable25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable25MouseClicked
        txtlocation.setText(jSearchTable25.getValueAt(jSearchTable25.getSelectedRow(), 1).toString());
        jSearchDialog25.dispose();
    }//GEN-LAST:event_jSearchTable25MouseClicked

    private void jButton525ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton525ActionPerformed
        jSearchDialog25.dispose();
    }//GEN-LAST:event_jButton525ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSearchTable22MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable22MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable22MouseEntered
    private void validateSavedData(){
    if(txtnames.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student names", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    if(txtid.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student id", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    if(comboclass.getSelectedItem()==null){
    JOptionPane.showMessageDialog(this, "Please select the student's class", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    if(txtterm.getText().isEmpty()){
    JOptionPane.showMessageDialog(this, "Please select the student current term", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    if(dateChooserField1.getDate()==null){
    JOptionPane.showMessageDialog(this, "Please input the payment date", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    if(buttonGroup1.getSelection()==null){
    JOptionPane.showMessageDialog(this, "You must select the mode of payment", "Insertion complication", JOptionPane.QUESTION_MESSAGE);
    return;
    }
    insertDetails();
    }
    public String payment(){
    String pay=null;
    if(jRadioButton1.isSelected())
        pay=jRadioButton1.getText();
    else if(jRadioButton2.isSelected())
        pay=jRadioButton2.getText();
    else if(jRadioButton3.isSelected())
        pay=jRadioButton3.getText();
    else if(jRadioButton4.isSelected())
        pay=jRadioButton4.getText();
    
    return pay;
    }
    
    public String payments(){
    String pay=null;
    if(jRadioButton5.isSelected())
        pay=jRadioButton5.getText();
    else if(jRadioButton6.isSelected())
        pay=jRadioButton6.getText();
    else if(jRadioButton7.isSelected())
        pay=jRadioButton7.getText();
    else if(jRadioButton8.isSelected())
        pay=jRadioButton8.getText();
    
    return pay;
    }
    
    private void insertDetails(){
    try {
        con.setAutoCommit(false);
        PreparedStatement pr=null;
        int count=0;
        String sql=null;
        String slipNo=null;
        String receiptNo=null;
        
            Statement st=con.createStatement();
            ResultSet rs1=st.executeQuery("select count(student_id) from fees_ledger where student_id='"+txtid.getText()+"' and current_term='"+txtterm.getText()+"' and current_class='"+comboclass.getSelectedItem()+"'");
            while (rs1.next()){
            count=rs1.getInt(1);
            }
            if(count>0){
            JOptionPane.showMessageDialog(this, "Initial term payment has already for \n"+txtnames.getText()+"been paid. \nPlease proceed to the Arrears Clearance tab", "Warning!!", JOptionPane.WARNING_MESSAGE);
            }
            else{
        int option=JOptionPane.showConfirmDialog(this, "Are you sure you want to save fees for term  "+txtterm.getText()+" and "+comboclass.getSelectedItem()+" class?", "Confirmation before saving!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(option==JOptionPane.YES_OPTION){

        sql="INSERT INTO fees_ledger(student_id, current_class, current_term, debit, credit, slip_no, "
                + "payment_date, payment_mode, payables, location) VALUES (?, ?, ?, ?::numeric(10, 2), ?::numeric(10, 2), ?,  ?::date, ?, ?, ?)";
        pr=con.prepareStatement(sql);
               ResultSet rs=SQLHelper.getResultset(con, "SELECT 'ACC'|| nextval('slip_no_seq')");
            while(rs.next()){
              slipNo=rs.getString(1);
    }
            pr.setString(1, txtid.getText());
            pr.setObject(2, comboclass.getSelectedItem());
            pr.setString(3, txtterm.getText());
            pr.setObject(4, txtamountpaid.getText());
            pr.setObject(5, txtamountpayable.getText());
            pr.setString(6, slipNo);
            pr.setObject(7, dateChooserField1.getDate().toString());
            pr.setString(8, payment());
            pr.setString(9, payables());
            pr.setString(10, txtlocation.getText());
            pr.executeUpdate();
        
            if(pr!=null)
                System.out.println("Fees Ledger Insert is Successful");
            
            sql="INSERT INTO fees_mgt(slip_no, student_id, current_term_id, current_class, payables, receipt_no, "
                + "paid, balance, payment_date, payment_mode) VALUES (?, ?, ?, ?, ?, ?, ?::numeric(10, 2), ?::numeric(10, 2), ?::date, ?)";
        pr=con.prepareStatement(sql);
       pr.setString(1, slipNo);
       pr.setString(2, txtid.getText());
       pr.setString(3, txtterm.getText());
       pr.setString(4, comboclass.getSelectedItem().toString());
                
       pr.setObject(5, payables());
       
       ResultSet rst=SQLHelper.getResultset(con, "SELECT 'REC'|| nextval('receipt_no_seq')");
            while(rst.next()){
              receiptNo=rst.getString(1);
    }
       pr.setString(6, receiptNo);
       pr.setObject(7, txtamountpaid.getText());
       pr.setObject(8, txtbalance.getText());
       pr.setObject(9, dateChooserField1.getDate().toString());
       pr.setString(10, payment());
//       pr.setString(11, txtlocation.getText());
       pr.executeUpdate();
       
       double tuition = 0, swimming = 0, extra = 0, diary = 0, uniform = 0, tea = 0, lunch = 0, transport = 0;
       
       String sql2="INSERT INTO public.payables_manager(student_id, term, class, payable, amount)VALUES (?, ?, ?, ?, ?)";
       
       
       if(jCheckBox1.isSelected()){
           
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'tu%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           tuition=qq.getDouble(1);
           }
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox1.getText());
           pr.setObject(5, tuition);
           pr.executeUpdate();
           System.out.println("tuition: "+tuition);
       }
       
       if(jCheckBox2.isSelected()){
           
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'lunch%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           lunch=qq.getDouble(1);
           }
           
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox2.getText());
           pr.setObject(5, lunch);
           pr.executeUpdate();
           System.out.println("lunch: "+lunch);
       }
       
       if(jCheckBox3.isSelected()){
           
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'tea%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           tea=qq.getDouble(1);
           }
           
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox3.getText());
           pr.setObject(5, tea);
           pr.executeUpdate();
           System.out.println("tea: "+tea);
       }
       
       if(jCheckBox4.isSelected()){
           
           
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'extra%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           extra=qq.getDouble(1);
           }
           
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox4.getText());
           pr.setObject(5, extra);
           pr.executeUpdate();
           System.out.println("extra: "+extra);
       }
       
       if(jCheckBox5.isSelected()){
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'swim%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           swimming=qq.getDouble(1);
           }
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox5.getText());
           pr.setObject(5, swimming);
           pr.executeUpdate();
           System.out.println("swim: "+swimming);
       }
       
       if(jCheckBox6.isSelected()){
        ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'uniform%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           uniform=qq.getDouble(1);
           }
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox6.getText());
           pr.setObject(5, uniform);
           pr.executeUpdate();
           System.out.println("uniform: "+uniform);
       }
       
       if(jCheckBox7.isSelected()){
           
           ResultSet qq=SQLHelper.getResultset(con, "select amount from fees_setup where payable ilike 'diary%' and term='"+txtterm.getText()+"' and class='"+comboclass.getSelectedItem()+"'");
           while(qq.next()){
           diary=qq.getDouble(1);
           }
           
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox7.getText());
           pr.setObject(5, diary);
           pr.executeUpdate();
           System.out.println("diary"+diary);
       }
       
       
       if(jCheckBox8.isSelected()){
           ResultSet qq=SQLHelper.getResultset(con, "select fees from location where current_term_id='"+txtterm.getText()+"'");
           while(qq.next()){
           transport=qq.getDouble(1);
           }
           pr=con.prepareStatement(sql2);
           pr.setString(1, txtid.getText());
           pr.setString(2, txtterm.getText());
           pr.setObject(3, comboclass.getSelectedItem());
           pr.setObject(4, jCheckBox8.getText());
           pr.setObject(5, transport);
           pr.executeUpdate();
           System.out.println("trans "+transport);
       }
       
       
       con.commit();
       con.setAutoCommit(true);
       if(pr!=null){
       JOptionPane.showMessageDialog(this, "Insert is Successful");
       FeesStatementPdf fees=new FeesStatementPdf();
       fees.FeesStatementPdf(con, String.valueOf(txtterm.getText()), String.valueOf(comboclass.getSelectedItem()), String.valueOf(txtid.getText()));
       resetDetails();
       }
        }
            }
    } catch (SQLException ex) {
        Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        try {
            con.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(FeesPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex1);
        }
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox comboclass;
    private javax.swing.JComboBox comboclass1;
    private kiwi.ui.DateChooserField dateChooserField1;
    private kiwi.ui.DateChooserField dateChooserField2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton522;
    private javax.swing.JButton jButton523;
    private javax.swing.JButton jButton524;
    private javax.swing.JButton jButton525;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JDialog jSearchDialog22;
    private javax.swing.JDialog jSearchDialog23;
    private javax.swing.JDialog jSearchDialog24;
    private javax.swing.JDialog jSearchDialog25;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JPanel jSearchPanel23;
    private javax.swing.JPanel jSearchPanel24;
    private javax.swing.JPanel jSearchPanel25;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JScrollPane jSearchScrollPane23;
    private javax.swing.JScrollPane jSearchScrollPane24;
    private javax.swing.JScrollPane jSearchScrollPane25;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable22;
    private javax.swing.JTable jSearchTable23;
    private javax.swing.JTable jSearchTable24;
    private javax.swing.JTable jSearchTable25;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField1132;
    private javax.swing.JTextField jTextField1133;
    private javax.swing.JTextField jTextField1134;
    private javax.swing.JTextField jTextField1135;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JTextField txtamountpaid;
    private javax.swing.JTextField txtamountpaid1;
    private javax.swing.JTextField txtamountpayable;
    private javax.swing.JTextField txtamountpayable1;
    private javax.swing.JTextField txtbalance;
    private javax.swing.JTextField txtbalance1;
    private javax.swing.JTextField txtclearance;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtid1;
    private javax.swing.JTextField txtlocation;
    private javax.swing.JTextField txtnames;
    private javax.swing.JTextField txtnames1;
    private javax.swing.JTextField txtnewbalance;
    private javax.swing.JTextField txtslipno;
    private javax.swing.JTextField txtslipno1;
    private javax.swing.JTextField txtterm;
    private javax.swing.JTextField txtterm1;
    // End of variables declaration//GEN-END:variables
}
