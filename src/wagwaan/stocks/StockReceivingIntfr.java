/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wagwaan.stocks;
import wagwaan.reports.StocksReceivingPdf;
import wagwaan.reports.UpdatingStockCountPdf;
import wagwaan.config.AMSUtility;
import wagwaan.config.ConnectionDB;
import wagwaan.config.DateCellEditor;
import wagwaan.config.DatePicker;
import wagwaan.config.SQLHelper;
import wagwaan.config.TableModel;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.JOptionPane;
/**
 *
 * @author maurice
 */
public class StockReceivingIntfr extends javax.swing.JInternalFrame {
 Connection con;        
 
    /**
     * Creates new form StockRecevingIntfr
     */
    public StockReceivingIntfr() {
        initComponents();
        con=ConnectionDB.getInstance().getCon();
        


    }//constructor end

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog22 = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        jTextField1132 = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        jSearchTable22 = new javax.swing.JTable();
        jButton522 = new javax.swing.JButton();
        jSearchDialog23 = new javax.swing.JDialog();
        jSearchPanel23 = new javax.swing.JPanel();
        jTextField1133 = new javax.swing.JTextField();
        jSearchScrollPane23 = new javax.swing.JScrollPane();
        jSearchTable23 = new javax.swing.JTable();
        jButton523 = new javax.swing.JButton();
        jSearchDialog30 = new javax.swing.JDialog();
        jSearchPanel24 = new javax.swing.JPanel();
        jTextField1134 = new javax.swing.JTextField();
        jSearchScrollPane24 = new javax.swing.JScrollPane();
        jSearchTable24 = new javax.swing.JTable();
        jButton524 = new javax.swing.JButton();
        jSearchDialog25 = new javax.swing.JDialog();
        jSearchPanel25 = new javax.swing.JPanel();
        jTextField1135 = new javax.swing.JTextField();
        jSearchScrollPane25 = new javax.swing.JScrollPane();
        jSearchTable25 = new javax.swing.JTable();
        jButton525 = new javax.swing.JButton();
        jSearchDialog26 = new javax.swing.JDialog();
        jSearchPanel26 = new javax.swing.JPanel();
        jTextField1136 = new javax.swing.JTextField();
        jSearchScrollPane26 = new javax.swing.JScrollPane();
        jSearchTable26 = new javax.swing.JTable();
        jButton526 = new javax.swing.JButton();
        jSearchDialog27 = new javax.swing.JDialog();
        jSearchPanel27 = new javax.swing.JPanel();
        jTextField1137 = new javax.swing.JTextField();
        jSearchScrollPane27 = new javax.swing.JScrollPane();
        jSearchTable27 = new javax.swing.JTable();
        jButton527 = new javax.swing.JButton();
        jSearchDialog24 = new javax.swing.JDialog();
        jSearchPanel28 = new javax.swing.JPanel();
        jTextField1138 = new javax.swing.JTextField();
        jSearchScrollPane28 = new javax.swing.JScrollPane();
        jSearchTable28 = new javax.swing.JTable();
        jButton528 = new javax.swing.JButton();
        jSearchDialog28 = new javax.swing.JDialog();
        jSearchPanel29 = new javax.swing.JPanel();
        jTextField1139 = new javax.swing.JTextField();
        jSearchScrollPane29 = new javax.swing.JScrollPane();
        jSearchTable29 = new javax.swing.JTable();
        jButton529 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        //jXTable1 = new org.jdesktop.swingx.JXTable(){
            //    Class[] types = new Class [] {
                //        java.lang.Object.class, java.lang.Object.class,java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                //                java.lang.Object.class, java.lang.Object.class
                //        };
            //    boolean[] canEdit = new boolean [] {false, false, false, false, true, true, false};
            //
            //    public Class getColumnClass(int columnIndex) {
                //        return types [columnIndex];
                //    }
            //
            //    public boolean isCellEditable(int rowIndex, int columnIndex) {
                //        return canEdit [columnIndex];
                //    }
            //};
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        txtuser = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable2 = new org.jdesktop.swingx.JXTable();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        txtuser1 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();

        jSearchDialog22.setModal(true);
        jSearchDialog22.setUndecorated(true);
        jSearchDialog22.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        jTextField1132.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1132CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(jTextField1132, gridBagConstraints);

        jSearchTable22.setToolTipText("");
        jSearchTable22.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable22MouseClicked(evt);
            }
        });
        jSearchScrollPane22.setViewportView(jSearchTable22);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton522.setText("Close");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog22.getContentPane().add(jSearchPanel22, gridBagConstraints);

        jSearchDialog23.setModal(true);
        jSearchDialog23.setUndecorated(true);
        jSearchDialog23.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel23.setLayout(new java.awt.GridBagLayout());

        jTextField1133.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1133CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel23.add(jTextField1133, gridBagConstraints);

        jSearchTable23.setToolTipText("");
        jSearchTable23.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable23MouseClicked(evt);
            }
        });
        jSearchScrollPane23.setViewportView(jSearchTable23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel23.add(jSearchScrollPane23, gridBagConstraints);

        jButton523.setText("Close");
        jButton523.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton523ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel23.add(jButton523, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog23.getContentPane().add(jSearchPanel23, gridBagConstraints);

        jSearchDialog30.setModal(true);
        jSearchDialog30.setUndecorated(true);
        jSearchDialog30.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel24.setLayout(new java.awt.GridBagLayout());

        jTextField1134.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1134CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel24.add(jTextField1134, gridBagConstraints);

        jSearchTable24.setToolTipText("");
        jSearchTable24.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable24MouseClicked(evt);
            }
        });
        jSearchScrollPane24.setViewportView(jSearchTable24);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel24.add(jSearchScrollPane24, gridBagConstraints);

        jButton524.setText("Close");
        jButton524.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton524ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel24.add(jButton524, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog30.getContentPane().add(jSearchPanel24, gridBagConstraints);

        jSearchDialog25.setModal(true);
        jSearchDialog25.setUndecorated(true);
        jSearchDialog25.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel25.setLayout(new java.awt.GridBagLayout());

        jTextField1135.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1135CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel25.add(jTextField1135, gridBagConstraints);

        jSearchTable25.setToolTipText("");
        jSearchTable25.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable25MouseClicked(evt);
            }
        });
        jSearchScrollPane25.setViewportView(jSearchTable25);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel25.add(jSearchScrollPane25, gridBagConstraints);

        jButton525.setText("Close");
        jButton525.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton525ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel25.add(jButton525, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog25.getContentPane().add(jSearchPanel25, gridBagConstraints);

        jSearchDialog26.setModal(true);
        jSearchDialog26.setUndecorated(true);
        jSearchDialog26.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel26.setLayout(new java.awt.GridBagLayout());

        jTextField1136.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1136CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel26.add(jTextField1136, gridBagConstraints);

        jSearchTable26.setToolTipText("");
        jSearchTable26.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable26MouseClicked(evt);
            }
        });
        jSearchScrollPane26.setViewportView(jSearchTable26);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel26.add(jSearchScrollPane26, gridBagConstraints);

        jButton526.setText("Close");
        jButton526.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton526ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel26.add(jButton526, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog26.getContentPane().add(jSearchPanel26, gridBagConstraints);

        jSearchDialog27.setModal(true);
        jSearchDialog27.setUndecorated(true);
        jSearchDialog27.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel27.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel27.setLayout(new java.awt.GridBagLayout());

        jTextField1137.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1137CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel27.add(jTextField1137, gridBagConstraints);

        jSearchTable27.setToolTipText("");
        jSearchTable27.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable27MouseClicked(evt);
            }
        });
        jSearchScrollPane27.setViewportView(jSearchTable27);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel27.add(jSearchScrollPane27, gridBagConstraints);

        jButton527.setText("Close");
        jButton527.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton527ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel27.add(jButton527, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog27.getContentPane().add(jSearchPanel27, gridBagConstraints);

        jSearchDialog24.setModal(true);
        jSearchDialog24.setUndecorated(true);
        jSearchDialog24.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel28.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel28.setLayout(new java.awt.GridBagLayout());

        jTextField1138.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1138CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel28.add(jTextField1138, gridBagConstraints);

        jSearchTable28.setToolTipText("");
        jSearchTable28.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable28MouseClicked(evt);
            }
        });
        jSearchScrollPane28.setViewportView(jSearchTable28);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel28.add(jSearchScrollPane28, gridBagConstraints);

        jButton528.setText("Close");
        jButton528.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton528ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel28.add(jButton528, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog24.getContentPane().add(jSearchPanel28, gridBagConstraints);

        jSearchDialog28.setModal(true);
        jSearchDialog28.setUndecorated(true);
        jSearchDialog28.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel29.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel29.setLayout(new java.awt.GridBagLayout());

        jTextField1139.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1139CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel29.add(jTextField1139, gridBagConstraints);

        jSearchTable29.setToolTipText("");
        jSearchTable29.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable29MouseClicked(evt);
            }
        });
        jSearchScrollPane29.setViewportView(jSearchTable29);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel29.add(jSearchScrollPane29, gridBagConstraints);

        jButton529.setText("Close");
        jButton529.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton529ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel29.add(jButton529, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog28.getContentPane().add(jSearchPanel29, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("STOCK RECEIVING");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item code", "Item Name", "Supplier ID", "Quantity Ordered", "Quantity Received", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable1.getTableHeader().setReorderingAllowed(false);
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jXTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jXTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);
        javax.swing.table.TableColumn datecell=jXTable1.getColumnModel().getColumn(5);
        DateCellEditor celleditor=new DateCellEditor(new DatePicker(), jXTable1);
        datecell.setCellEditor (celleditor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Select Order ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jLabel3, gridBagConstraints);

        jTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jTextField1, gridBagConstraints);

        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel7.add(jButton8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        jPanel3.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton3.setText("CLOSE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton3, gridBagConstraints);

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton1, gridBagConstraints);

        jButton2.setText("RESET");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton2, gridBagConstraints);

        jButton7.setText("REMOVE ROW");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        txtuser.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(txtuser, gridBagConstraints);

        searchButton1.setToolTipText("Search");
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton1.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel41.add(searchButton1, gridBagConstraints);

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel41.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel1.add(jPanel41, gridBagConstraints);

        jTabbedPane1.addTab("INITIAL STOCK RECEIVING", jPanel1);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jXTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Name", "Supplier ID", "Quantity Ordered", "Quantity Received", "Deficit", "Updating Quantity", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable2MouseClicked(evt);
            }
        });
        jXTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jXTable2KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jXTable2);
        if (jXTable2.getColumnModel().getColumnCount() > 0) {
            jXTable2.getColumnModel().getColumn(6).setResizable(false);
        }
        javax.swing.table.TableColumn datecell1=jXTable2.getColumnModel().getColumn(7);
        DateCellEditor celleditor1=new DateCellEditor(new DatePicker(), jXTable2);
        datecell1.setCellEditor (celleditor1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButton4.setText("SAVE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton4, gridBagConstraints);

        jButton5.setText("RESET");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton5, gridBagConstraints);

        jButton6.setText("CLOSE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel4.add(jPanel6, gridBagConstraints);

        jPanel42.setLayout(new java.awt.GridBagLayout());

        txtuser1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel42.add(txtuser1, gridBagConstraints);

        searchButton2.setToolTipText("Search");
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(20, 20));
        searchButton2.setPreferredSize(new java.awt.Dimension(20, 20));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel42.add(searchButton2, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel42.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel4.add(jPanel42, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("Select Order ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jLabel4, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jTextField2, gridBagConstraints);

        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel8.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        jPanel4.add(jPanel8, gridBagConstraints);

        jTabbedPane1.addTab("UPDATING DEMAND DEFICITS", jPanel4);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
   
    private void jTextField1132CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1132CaretUpdate
        if(jTextField1132.getCaretPosition()>3){
            jSearchTable22.setModel(TableModel.createTableVectors(con, "select ord.item_code AS ITM_CODE, itm.item_name AS ITM_NAME, quantity_ordered as QTY_ORDERED, "
                    + "ord.order_id AS ORDER_ID, ord.supplier_id AS SUPPLIER from stock_orders ord, stock_items itm where ord.item_code=itm.item_code "
                    + "and itm.item_name ilike '%"+jTextField1132.getText()+"%' and delivered='FALSE' "));
            //and ord.order_id not in (select order_id from st_Receiving_issuing st) 
            jSearchScrollPane22.setViewportView(jSearchTable22);
        }
    }//GEN-LAST:event_jTextField1132CaretUpdate

    private void jSearchTable22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable22MouseClicked
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 0), jXTable1.getSelectedRow() ,0);
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 1), jXTable1.getSelectedRow() ,1);
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 2), jXTable1.getSelectedRow() ,3);
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 3), jXTable1.getSelectedRow() ,6);
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 4), jXTable1.getSelectedRow() ,2);
        jSearchDialog22.dispose();
    }//GEN-LAST:event_jSearchTable22MouseClicked

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed
        jSearchDialog22.dispose();
    }//GEN-LAST:event_jButton522ActionPerformed

    private void jTextField1133CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1133CaretUpdate
        if(jTextField1133.getCaretPosition()>3){
            jSearchTable23.setModel(TableModel.createTableVectors(con, "select supplier_id, supplier_names from stock_suppliers where supplier_names ilike '%"+jTextField1133.getText()+"%' "));
            jSearchScrollPane23.setViewportView(jSearchTable23);
        }
    }//GEN-LAST:event_jTextField1133CaretUpdate

    private void jSearchTable23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable23MouseClicked
        jXTable1.setValueAt(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 0), jXTable1.getSelectedRow(), 2);
        jSearchDialog23.dispose();
        /*String sql="select quantity_ordered from stock_orders where supplier_id='"+jXTable1.getValueAt(jXTable1.getSelectedRow(), 2)+"' and"
                + " item_code='"+jXTable1.getValueAt(jXTable1.getSelectedRow(), 0)+"' ";
        try {
            Statement st=con.createStatement();
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
            jXTable1.setValueAt(rs.getInt(1), jXTable1.getSelectedRow(), 4);
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_jSearchTable23MouseClicked

    private void jButton523ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton523ActionPerformed
        jSearchDialog23.dispose();
    }//GEN-LAST:event_jButton523ActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        /*if(jXTable1.getSelectedColumn()==0){
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog22.setSize(400,200);
        jSearchDialog22.setLocation(point);
        jSearchDialog22.show();
        }*/
       /* if(jXTable1.getSelectedColumn()==2){
        java.awt.Point point=jScrollPane1.getLocationOnScreen();
        jSearchDialog23.setSize(400, 200);
        jSearchDialog23.setLocation(point);
        jSearchDialog23.show();
        }*/
        
        if(jXTable1.getSelectedColumn()==4){
        kiwi.ui.DateChooser d=new kiwi.ui.DateChooser();
        d.setVisible(true);
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    private void jXTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXTable1KeyReleased
        if(jXTable1.getSelectedColumn()==4){
            Character ch=evt.getKeyChar();
            if(!Character.isDigit(ch)){
                JOptionPane.showMessageDialog(this, "Please input quantity as a number");
                jXTable1.setValueAt(0, jXTable1.getSelectedRow(), 4);
            }
        }
        int qty_received=0;
        int qty_ordered=0;
        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 3).toString()!=null){
            qty_ordered=Integer.parseInt(jXTable1.getValueAt(jXTable1.getSelectedRow(), 3).toString());
        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 4)!=null){
       qty_received=Integer.parseInt(jXTable1.getValueAt(jXTable1.getSelectedRow(), 4).toString());
        }
        if(qty_received>qty_ordered){
        JOptionPane.showMessageDialog(this, "Quantity received cannot be greater than quantity ordered");
        jXTable1.setValueAt(null, jXTable1.getSelectedRow(), 4);
        }
    }
    }//GEN-LAST:event_jXTable1KeyReleased
    private void validateSaving(){
        if(txtuser.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Please select the receiver", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
        return;
        }
//       if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 0)==null){
//        JOptionPane.showMessageDialog(this, "Please select the item code", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
//        return;
//        }
//        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 1)==null){
//        JOptionPane.showMessageDialog(this, "Please select the item name", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
//        return;
//        }
//        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 2)==null){
//        JOptionPane.showMessageDialog(this, "Please select the Supplier Name", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
//        return;
//        }
//        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 3)==null){
//        JOptionPane.showMessageDialog(this, "Please input the quantity received", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
//        return;
//        }
//        if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 4)==null){
//        JOptionPane.showMessageDialog(this, "Please input the receiving date", "Missing Variables", JOptionPane.QUESTION_MESSAGE);
//        return;
//        }
        insertDetails();
    }
    private void insertDetails(){
    PreparedStatement pr=null;
    String sql=null;
    String receivingNo=null;
    String counter=null;
    int orders=0;
        try {
            con.setAutoCommit(false);
            
            sql="INSERT INTO st_receiving_issuing(id, quantity_received, receiving_no, supplier_id, receiving_date, item_code, order_id, receiver)\n" +
                    "VALUES (?, ?::int, ?,  ?, ?::date,  ?, ?, ?)";
            
            ResultSet rs1=SQLHelper.getResultset(con, "select 'REC NO.' || nextval('receiving_no_seq')");
                while(rs1.next()){
                    receivingNo=rs1.getString(1);
                }
                
                ResultSet ord=SQLHelper.getResultset(con, "select count(order_id) from st_receiving_issuing where order_id='"+jTextField1.getText()+"'");
                while(ord.next()){
                    orders=ord.getInt(1);
                }
                
                if(orders>0){
                    JOptionPane.showMessageDialog(this, "there was an initial stock receiving for Order No: "+jTextField1.getText()+"\n. Please proceed to the next tab to "
                            + "update the order deficits", "Double Entry Error", JOptionPane.ERROR_MESSAGE);
                    jButton1.setEnabled(false);
                }
                else if(orders<=0){
                    for(int i=0;i<jXTable1.getRowCount();i++){
                
                
                        System.out.println("Orders "+orders);
                
                        ResultSet rs2=SQLHelper.getResultset(con, "select 'REC/ISS NO.' || nextval('rec_iss_no_seq')");
                        while(rs2.next()){
                            counter=rs2.getString(1);
                                }

                        if(jXTable1.getValueAt(i, 0)!=null && jXTable1.getValueAt(i, 1)!=null && jXTable1.getValueAt(i, 2)!=null && jXTable1.getValueAt(i, 3)!=null && 
                                jXTable1.getValueAt(i, 4)!=null && jXTable1.getValueAt(i, 5)!=null){
                            pr=con.prepareStatement(sql);
                            pr.setObject(1, counter);
                            pr.setObject(2, jXTable1.getValueAt(i, 4));
                            pr.setObject(3, receivingNo);
                            pr.setObject(4, jXTable1.getValueAt(i, 2));
                            pr.setObject(5, jXTable1.getValueAt(i, 5));
                            pr.setObject(6, jXTable1.getValueAt(i, 0));
                            pr.setObject(7, jTextField1.getText());
                            pr.setString(8, txtuser.getText());
                            pr.executeUpdate();
                            System.out.println(pr.toString());
                    
                            Double price=0.00;
                            
                            ResultSet pricing=SQLHelper.getResultset(con, "select buying_price from stock_items where item_code='"+jXTable1.getValueAt(i, 0)+"'");
                            while(pricing.next()){
                                price=pricing.getDouble(1);
                            }
                            double credit=price*((int) jXTable1.getValueAt(i, 4));
                            System.out.println(credit);
                            String sql3="INSERT INTO creditors_ledger(account_no, item_code, debit, credit, invoice_no, date, receiving_no)"
                                    + "VALUES (?, ?, ?::numeric, ?::numeric, ?, ?::date, ?)";
                            pr=con.prepareStatement(sql3);
                            pr.setString(1, jXTable1.getValueAt(i, 2).toString());
                            pr.setString(2, jXTable1.getValueAt(i, 0).toString());
                            pr.setObject(3, 0.00);
                            pr.setObject(4, credit);
                            pr.setObject(5, "-");
                            pr.setObject(6, jXTable1.getValueAt(i, 5));
                            pr.setString(7, receivingNo);
                            pr.executeUpdate();
                            System.out.println(pr.toString());
                    
                            int count=0;
                            Statement st = con.createStatement();
                            ResultSet rs = st.executeQuery("select quantity from stock_items where item_code = '"+jXTable1.getValueAt(i, 0)+"' ");
                            while (rs.next()) {
                                count = rs.getInt(1);
                            }
                            
                            System.out.println("count is " + count);
                            System.out.println("ok 2");


                            String sql1 = "update stock_items set quantity=?::int where item_code ='"+jXTable1.getValueAt(i, 0)+"' ";
                            pr=con.prepareStatement(sql);
                            System.out.println("ok 3");
                            pr = con.prepareStatement(sql1);
                            pr.setObject(1, count + Integer.parseInt(jXTable1.getValueAt(i, 4).toString()));
                            pr.executeUpdate();
                            
                            System.out.println(pr.toString());

                            int a=Integer.parseInt(jXTable1.getValueAt(i, 3).toString());
                            int b=Integer.parseInt(jXTable1.getValueAt(i, 4).toString());
                            if(a==b){
                           String sql2="update stock_orders set delivered='TRUE' where item_code ='"+jXTable1.getValueAt(i, 0)+"' and order_id='"+jTextField1.getText()+"'";
                            pr=con.prepareStatement(sql2);
                            pr.executeUpdate();
                            System.out.println(pr.toString());
                            }
                        }
                    }
                    con.commit();
                con.setAutoCommit(true);
                if(pr!=null){
                JOptionPane.showMessageDialog(this, "Insert is Successful");
                StocksReceivingPdf st=new StocksReceivingPdf();
                st.StocksReceivingPdf(con, receivingNo);
                resetDetails();
                }
                }
            

                
//            }
        } catch (SQLException ex) {
            Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex);
            ex.getMessage();
            try {
                con.rollback();
            } catch (SQLException ex1) {
            Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex1);
            ex1.getMessage();
            }
            }
    }
    private void resetDetails(){
    txtuser.setText("");
    for(int i=0;i<jXTable1.getRowCount();i++){
        for(int r=0;r<jXTable1.getColumnCount();r++){
            jXTable1.setValueAt(null, i, r);
        }
    }
    jTextField1.setText("");
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        validateSaving();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        AMSUtility.showSearchDialog(txtuser, jSearchDialog30);
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void jTextField1134CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1134CaretUpdate
        if(jTextField1134.getCaretPosition()>3){
        jSearchTable24.setModel(TableModel.createTableVectors(con, "select username from access_control where username ilike '%"+jTextField1134.getText()+"%'"));
        jSearchScrollPane24.setViewportView(jSearchTable24);
        }
    }//GEN-LAST:event_jTextField1134CaretUpdate

    private void jSearchTable24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable24MouseClicked
        txtuser.setText(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 0).toString());
        jSearchDialog30.dispose();
    }//GEN-LAST:event_jSearchTable24MouseClicked

    private void jButton524ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton524ActionPerformed
        jSearchDialog30.dispose();
    }//GEN-LAST:event_jButton524ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
resetDetails();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        AMSUtility.showSearchDialog(txtuser1, jSearchDialog26);
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1135CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1135CaretUpdate
        if(jTextField1135.getCaretPosition()>3){
        jSearchTable25.setModel(TableModel.createTableVectors(con, "select order_id from stock_orders where delivered=false and order_id ILIKE '%"+jTextField1135.getText()+"%'"));
        jSearchScrollPane25.setViewportView(jSearchTable25);
        }
    }//GEN-LAST:event_jTextField1135CaretUpdate

    private void jSearchTable25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable25MouseClicked
        jTextField2.setText(jSearchTable25.getValueAt(jSearchTable25.getSelectedRow(), 0).toString());
        jSearchDialog25.dispose();
        
        String sql="select rec.item_code, item_name, rec.supplier_id,  quantity_ordered, sum(quantity_received), (quantity_ordered-sum(quantity_received)) as deficit \n" +
                        "from stock_orders ord, st_receiving_issuing rec, stock_items itm where ord.order_id=rec.order_id and itm.item_code=rec.item_code "
                        + "and rec.item_code=ord.item_code and delivered=false and rec.order_id='"+jTextField2.getText()+"' group by 1, 2, 3, 4";
        try {
            ResultSet rs=SQLHelper.getResultset(con, sql);
            int i=0;
            while(rs.next()){
                    jXTable2.setValueAt(rs.getObject(1), i, 0);
                    jXTable2.setValueAt(rs.getObject(2), i, 1);
                    jXTable2.setValueAt(rs.getObject(3), i, 2);
                    jXTable2.setValueAt(rs.getObject(4), i, 3);
                    jXTable2.setValueAt(rs.getObject(5), i, 4);
                    jXTable2.setValueAt(rs.getObject(6), i, 5);
                    i++;
                                }
     } catch (SQLException ex){
     ex.printStackTrace();
     }
    
    }//GEN-LAST:event_jSearchTable25MouseClicked

    private void jButton525ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton525ActionPerformed
        jSearchDialog25.dispose();
    }//GEN-LAST:event_jButton525ActionPerformed

    private void jTextField1136CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1136CaretUpdate
        if(jTextField1136.getCaretPosition()>2){
        jSearchTable26.setModel(TableModel.createTableVectors(con, "select username from access_control where username ilike '%"+jTextField1136.getText()+"%'"));
        jSearchScrollPane26.setViewportView(jSearchTable26);
        }
    }//GEN-LAST:event_jTextField1136CaretUpdate

    private void jSearchTable26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable26MouseClicked
        txtuser1.setText(jSearchTable26.getValueAt(jSearchTable26.getSelectedRow(), 0).toString());
        jSearchDialog26.dispose();
    }//GEN-LAST:event_jSearchTable26MouseClicked

    private void jButton526ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton526ActionPerformed
        jSearchDialog26.dispose();
    }//GEN-LAST:event_jButton526ActionPerformed

    private void jTextField1137CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1137CaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1137CaretUpdate

    private void jSearchTable27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable27MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable27MouseClicked

    private void jButton527ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton527ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton527ActionPerformed

    private void jXTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable2MouseClicked
//        if(jXTable2.getSelectedColumn()==0){
//        java.awt.Point point=jScrollPane2.getLocationOnScreen();
//        jSearchDialog25.setSize(400, 200);
//        jSearchDialog25.setLocation(point);
//        jSearchDialog25.setVisible(true);
//        }
        
//        if(jXTable2.getSelectedColumn()==7){
//        kiwi.ui.DateChooser date=new kiwi.ui.DateChooser();
//        date.setVisible(true);
//        }
    }//GEN-LAST:event_jXTable2MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        resetDetails2();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        validateSave();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jXTable2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXTable2KeyReleased
        int x=0;
        int y=0;
        if (jXTable2.getValueAt(jXTable2.getSelectedRow(), 5)!=null) {
            x=Integer.parseInt(jXTable2.getValueAt(jXTable2.getSelectedRow(), 5).toString());
        }
        
        
        if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 6)!=null){
            y=Integer.parseInt(jXTable2.getValueAt(jXTable2.getSelectedRow(), 6).toString());
        }
        
        if(y>x){
        JOptionPane.showMessageDialog(this, "The updating quantity cannot be greater than the deficit ");
        jXTable2.setValueAt(null, jXTable2.getSelectedRow(), 6);
        }
    
        Character ch=evt.getKeyChar();
        if(jXTable2.getSelectedColumn()==6){
        if(!Character.isDigit(ch)){
        JOptionPane.showMessageDialog(this, "Updating quantity must be a number");
        jXTable2.setValueAt(null, jXTable2.getSelectedRow(), 6);
        }
        
        }
    }//GEN-LAST:event_jXTable2KeyReleased

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
                int rows2Delete = jXTable1.getSelectedRowCount();
        
        int[] selectedRows = jXTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        }
        else if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jXTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
            }
        else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jXTable1.getModel();
                
                defTableModel.removeRow(jXTable1.getSelectedRow());
            }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        AMSUtility.showSearchDialog(jTextField1, jSearchDialog28);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField1138CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1138CaretUpdate
//        if(jTextField1138.getCaretPosition()>2){
//            jSearchTable28.setModel(wagwaan.config.TableModel.createTableVectors(con, "select distinct(order_id) from stock_orders where delivered=false "
//                    + "and order_id ilike '%"+jTextField1138.getText()+"%' "));
//            jSearchScrollPane24.setViewportView(jSearchTable28);
//        }
    }//GEN-LAST:event_jTextField1138CaretUpdate

    private void jSearchTable28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable28MouseClicked
        
    }//GEN-LAST:event_jSearchTable28MouseClicked

    private void jButton528ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton528ActionPerformed
        jSearchDialog24.dispose();
    }//GEN-LAST:event_jButton528ActionPerformed

    private void jTextField1139CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1139CaretUpdate
        if(jTextField1139.getCaretPosition()>2){
            jSearchTable29.setModel(TableModel.createTableVectors(con, "select distinct(order_id) from stock_orders where delivered=false and order_id ilike '%"+jTextField1139.getText()+"%'"));
            jSearchScrollPane29.setViewportView(jSearchTable29);
        }
    }//GEN-LAST:event_jTextField1139CaretUpdate

    private void jSearchTable29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable29MouseClicked
        jTextField1.setText(jSearchTable29.getValueAt(jSearchTable29.getSelectedRow(), 0).toString());
        jSearchDialog28.dispose();
        
     try {
         ResultSet rs=SQLHelper.getResultset(con, "select ord.item_code, item_name, ord.supplier_id, quantity_ordered from stock_items itm, stock_suppliers sup, "
                 + "stock_orders ord where sup.active=true and ord.item_code=itm.item_code and sup.supplier_id=ord.supplier_id and delivered=false and order_id='"+jTextField1.getText()+"'");
         int i=0;
         while(rs.next()){
             jXTable1.setValueAt(rs.getObject(1), i, 0);
             jXTable1.setValueAt(rs.getObject(2), i, 1);
             jXTable1.setValueAt(rs.getObject(3), i, 2);
             jXTable1.setValueAt(rs.getObject(4), i, 3);
             i++;
         }
     } catch (SQLException ex) {
         Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex);
     }
    }//GEN-LAST:event_jSearchTable29MouseClicked

    private void jButton529ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton529ActionPerformed
        jSearchDialog28.dispose();
    }//GEN-LAST:event_jButton529ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        AMSUtility.showSearchDialog(jTextField2, jSearchDialog25);
    }//GEN-LAST:event_jButton9ActionPerformed
    private void validateSave(){
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 0)==null){
//    JOptionPane.showMessageDialog(this, "Please select the item code", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 1)==null){
//    JOptionPane.showMessageDialog(this, "Please select the item name", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 2)==null){
//    JOptionPane.showMessageDialog(this, "Please select the supplier ID", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 3)==null){
//    JOptionPane.showMessageDialog(this, "Please select the quantity ordered", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 4)==null){
//    JOptionPane.showMessageDialog(this, "Please select the Quantity received", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 5)==null){
//    JOptionPane.showMessageDialog(this, "Please select the Deficit", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 6)==null){
//    JOptionPane.showMessageDialog(this, "Please input the supplied quantity", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
//    
//    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 7)==null){
//    JOptionPane.showMessageDialog(this, "Please select the current date", "Missing entries", JOptionPane.PLAIN_MESSAGE);
//    return;
//    }
        if(txtuser1.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select the receiver", "Missing data!!", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    insert();
    }
    
    private void insert(){
        int current_quantity=0;
        String counter=null;
        int qty_ordered=0;
        int qty_received=0;
           int count=0;
        String receivingNo=null;
     try {
         con.setAutoCommit(false);
         ResultSet r1=SQLHelper.getResultset(con, "select count(order_id) from st_receiving_issuing where order_id='"+jTextField2.getText()+"'");
         
         while(r1.next()){
             count=r1.getInt(1);
         }
         if(count<=0){
             JOptionPane.showMessageDialog(this, "You cannot update deficits without an initial stock receiving.\n Please proceed to the initial stocks receiving tab", "Input error", JOptionPane.ERROR_MESSAGE);
             jButton4.setEnabled(false);
         }
         else if(count>0){
             ResultSet rs=SQLHelper.getResultset(con, "select quantity from stock_items where item_code='"+jXTable2.getValueAt(jXTable2.getSelectedRow(), 0)+"'");
         while(rs.next()){
         current_quantity=rs.getInt(1);
         System.out.println(current_quantity);
         }
         ResultSet rs2=SQLHelper.getResultset(con, "select 'REC NO.' || nextval('receiving_no_seq')");
                while(rs2.next()){
                receivingNo=rs2.getString(1);
                }
                
                     
                
         PreparedStatement pr=null;
         String sql="INSERT INTO st_receiving_issuing(item_code, quantity_received, supplier_id, receiver, receiving_date, receiving_no, order_id, id)\n" +
                            "    VALUES (?, ?::int, ?, ?, ?::date, ?, ?, ?)";
         pr=con.prepareStatement(sql);
         for(int i=0;i<jXTable2.getRowCount();i++){
             
                ResultSet no2=SQLHelper.getResultset(con, "select 'REC/ISS NO.' || nextval('rec_iss_no_seq')");
                while(no2.next()){
                    counter=no2.getString(1);
                }
             
             if(jXTable2.getValueAt(i, 0)!=null && jXTable2.getValueAt(i, 1)!=null && jXTable2.getValueAt(i, 2)!=null && jXTable2.getValueAt(i, 3)!=null && 
                     jXTable2.getValueAt(i, 4)!=null && jXTable2.getValueAt(i, 5)!=null && jXTable2.getValueAt(i, 6)!=null && jXTable2.getValueAt(i, 7)!=null){
             pr.setObject(1, jXTable2.getValueAt(i, 0));
             pr.setObject(2, jXTable2.getValueAt(i, 6));
             pr.setObject(3, jXTable2.getValueAt(i, 2));
             pr.setObject(4, txtuser1.getText());
             pr.setObject(5, jXTable2.getValueAt(i, 7));
             pr.setObject(6, receivingNo);
             pr.setObject(7, jTextField2.getText());
             pr.setString(8, counter);
             pr.executeUpdate();
             System.out.println(pr.toString());

             String sql4="INSERT INTO creditors_ledger(account_no, item_code, debit, credit, invoice_no, date, receiving_no)VALUES (?, ?, ?::numeric, ?::numeric, ?, ?::date, ?)";
             pr=con.prepareStatement(sql4);
             pr.setObject(1, jXTable2.getValueAt(i, 2));
             pr.setObject(2, jXTable2.getValueAt(i, 0));
             pr.setObject(3, 0.00);
             ResultSet pricing=SQLHelper.getResultset(con, "select buying_price from stock_items where item_code='"+jXTable2.getValueAt(i, 0)+"'");
             double price=0.00;
             while(pricing.next()){
                 price=pricing.getDouble(1);
             }
             double totl= Double.parseDouble(jXTable2.getValueAt(i, 6).toString())*price;
             pr.setObject(4, totl);
             pr.setString(5, "-");
             pr.setObject(6, jXTable2.getValueAt(i, 7));
             pr.setString(7, receivingNo);
             pr.executeUpdate();
                 System.out.println(pr.toString());
                 
             PreparedStatement pr3=con.prepareStatement("update stock_items set quantity=?::int where item_code='"+jXTable2.getValueAt(i, 0)+"'");
                pr3.setObject(1, current_quantity+Integer.parseInt(jXTable2.getValueAt(i, 6).toString()));
                pr3.executeUpdate();
             System.out.println(pr3.toString());
             
            ResultSet rs1=SQLHelper.getResultset(con, "select quantity_ordered, sum(quantity_received) from stock_orders ord, st_receiving_issuing r where "
                    + "r.item_code='"+jXTable2.getValueAt(i, 0)+"' and r.item_code=ord.item_code and ord.order_id=r.order_id and r.order_id='"+jTextField2.getText()+"' "
                    + "and delivered=false group by quantity_ordered");
            
                while(rs1.next()){
                qty_ordered=rs1.getInt(1);
                qty_received=rs1.getInt(2);
         }         
            if(qty_ordered==qty_received){
            PreparedStatement pr2=null;
            String sql2="update stock_orders set delivered=true where item_code='"+jXTable2.getValueAt(i, 0)+"' and order_id='"+jTextField2.getText()+"'";
            pr2=con.prepareStatement(sql2);
            pr2.executeUpdate();    
            System.out.println(pr2.toString());
            }
         }
         }
         con.commit();
         con.setAutoCommit(true);
            if(con!=null){
            JOptionPane.showMessageDialog(this, "insert successful");
            StocksReceivingPdf st=new StocksReceivingPdf();
                st.StocksReceivingPdf(con, receivingNo);
            resetDetails2();
         }
         
            }
            
     } catch (SQLException ex) {
         Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex);
            try {
                con.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(StockReceivingIntfr.class.getName()).log(Level.SEVERE, null, ex1);
            }
     }
    
     
    }
    private void resetDetails2(){
    for(int r=0;r<jXTable2.getRowCount();r++){
            for(int c=0;c<jXTable2.getColumnCount();c++){
                jXTable2.setValueAt(null, r, c);
            }
        }
        txtuser1.setText("");
        jTextField2.setText("");
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton522;
    private javax.swing.JButton jButton523;
    private javax.swing.JButton jButton524;
    private javax.swing.JButton jButton525;
    private javax.swing.JButton jButton526;
    private javax.swing.JButton jButton527;
    private javax.swing.JButton jButton528;
    private javax.swing.JButton jButton529;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog22;
    private javax.swing.JDialog jSearchDialog23;
    private javax.swing.JDialog jSearchDialog24;
    private javax.swing.JDialog jSearchDialog25;
    private javax.swing.JDialog jSearchDialog26;
    private javax.swing.JDialog jSearchDialog27;
    private javax.swing.JDialog jSearchDialog28;
    private javax.swing.JDialog jSearchDialog30;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JPanel jSearchPanel23;
    private javax.swing.JPanel jSearchPanel24;
    private javax.swing.JPanel jSearchPanel25;
    private javax.swing.JPanel jSearchPanel26;
    private javax.swing.JPanel jSearchPanel27;
    private javax.swing.JPanel jSearchPanel28;
    private javax.swing.JPanel jSearchPanel29;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JScrollPane jSearchScrollPane23;
    private javax.swing.JScrollPane jSearchScrollPane24;
    private javax.swing.JScrollPane jSearchScrollPane25;
    private javax.swing.JScrollPane jSearchScrollPane26;
    private javax.swing.JScrollPane jSearchScrollPane27;
    private javax.swing.JScrollPane jSearchScrollPane28;
    private javax.swing.JScrollPane jSearchScrollPane29;
    private javax.swing.JTable jSearchTable22;
    private javax.swing.JTable jSearchTable23;
    private javax.swing.JTable jSearchTable24;
    private javax.swing.JTable jSearchTable25;
    private javax.swing.JTable jSearchTable26;
    private javax.swing.JTable jSearchTable27;
    private javax.swing.JTable jSearchTable28;
    private javax.swing.JTable jSearchTable29;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField1132;
    private javax.swing.JTextField jTextField1133;
    private javax.swing.JTextField jTextField1134;
    private javax.swing.JTextField jTextField1135;
    private javax.swing.JTextField jTextField1136;
    private javax.swing.JTextField jTextField1137;
    private javax.swing.JTextField jTextField1138;
    private javax.swing.JTextField jTextField1139;
    private javax.swing.JTextField jTextField2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXTable jXTable2;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField txtuser;
    private javax.swing.JTextField txtuser1;
    // End of variables declaration//GEN-END:variables
}
