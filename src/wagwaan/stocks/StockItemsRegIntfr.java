/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wagwaan.stocks;

import wagwaan.config.ConnectionDB;
import wagwaan.config.DateCellEditor;
import wagwaan.config.DatePicker;
import wagwaan.config.SQLHelper;
import wagwaan.config.TableModel;
import java.awt.CardLayout;
import java.sql.*;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author maurice
 */
public class StockItemsRegIntfr extends javax.swing.JInternalFrame {
Connection con;
    /**
     * Creates new form StockItemsRegIntfr
     */
    public StockItemsRegIntfr() {
        initComponents();
        con=ConnectionDB.getInstance().getCon();
        btnupdate.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog22 = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        jTextField1132 = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        jSearchTable22 = new javax.swing.JTable();
        jButton522 = new javax.swing.JButton();
        jSearchDialog23 = new javax.swing.JDialog();
        jSearchPanel23 = new javax.swing.JPanel();
        jTextField1133 = new javax.swing.JTextField();
        jSearchScrollPane23 = new javax.swing.JScrollPane();
        jSearchTable23 = new javax.swing.JTable();
        jButton523 = new javax.swing.JButton();
        jSearchDialog24 = new javax.swing.JDialog();
        jSearchPanel24 = new javax.swing.JPanel();
        jTextField1134 = new javax.swing.JTextField();
        jSearchScrollPane24 = new javax.swing.JScrollPane();
        jSearchTable24 = new javax.swing.JTable();
        jButton524 = new javax.swing.JButton();
        jSearchDialog25 = new javax.swing.JDialog();
        jSearchPanel25 = new javax.swing.JPanel();
        jTextField1135 = new javax.swing.JTextField();
        jSearchScrollPane25 = new javax.swing.JScrollPane();
        jSearchTable25 = new javax.swing.JTable();
        jButton525 = new javax.swing.JButton();
        jSearchDialog26 = new javax.swing.JDialog();
        jSearchPanel26 = new javax.swing.JPanel();
        jTextField1136 = new javax.swing.JTextField();
        jSearchScrollPane26 = new javax.swing.JScrollPane();
        jSearchTable26 = new javax.swing.JTable();
        jButton526 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnclose = new javax.swing.JButton();
        btnreset = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cardPanelController = new javax.swing.JPanel();
        card2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        card3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable2 = new org.jdesktop.swingx.JXTable();

        jSearchDialog22.setModal(true);
        jSearchDialog22.setUndecorated(true);
        jSearchDialog22.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        jTextField1132.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1132CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(jTextField1132, gridBagConstraints);

        jSearchTable22.setToolTipText("");
        jSearchTable22.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable22MouseClicked(evt);
            }
        });
        jSearchScrollPane22.setViewportView(jSearchTable22);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton522.setText("Close");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog22.getContentPane().add(jSearchPanel22, gridBagConstraints);

        jSearchDialog23.setModal(true);
        jSearchDialog23.setUndecorated(true);
        jSearchDialog23.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel23.setLayout(new java.awt.GridBagLayout());

        jTextField1133.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1133CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel23.add(jTextField1133, gridBagConstraints);

        jSearchTable23.setToolTipText("");
        jSearchTable23.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable23MouseClicked(evt);
            }
        });
        jSearchScrollPane23.setViewportView(jSearchTable23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel23.add(jSearchScrollPane23, gridBagConstraints);

        jButton523.setText("Close");
        jButton523.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton523ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel23.add(jButton523, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog23.getContentPane().add(jSearchPanel23, gridBagConstraints);

        jSearchDialog24.setModal(true);
        jSearchDialog24.setUndecorated(true);
        jSearchDialog24.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel24.setLayout(new java.awt.GridBagLayout());

        jTextField1134.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1134CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel24.add(jTextField1134, gridBagConstraints);

        jSearchTable24.setToolTipText("");
        jSearchTable24.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable24MouseClicked(evt);
            }
        });
        jSearchScrollPane24.setViewportView(jSearchTable24);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel24.add(jSearchScrollPane24, gridBagConstraints);

        jButton524.setText("Close");
        jButton524.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton524ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel24.add(jButton524, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog24.getContentPane().add(jSearchPanel24, gridBagConstraints);

        jSearchDialog25.setModal(true);
        jSearchDialog25.setUndecorated(true);
        jSearchDialog25.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel25.setLayout(new java.awt.GridBagLayout());

        jTextField1135.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1135CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel25.add(jTextField1135, gridBagConstraints);

        jSearchTable25.setToolTipText("");
        jSearchTable25.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable25MouseClicked(evt);
            }
        });
        jSearchScrollPane25.setViewportView(jSearchTable25);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel25.add(jSearchScrollPane25, gridBagConstraints);

        jButton525.setText("Close");
        jButton525.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton525ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel25.add(jButton525, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog25.getContentPane().add(jSearchPanel25, gridBagConstraints);

        jSearchDialog26.setModal(true);
        jSearchDialog26.setUndecorated(true);
        jSearchDialog26.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel26.setLayout(new java.awt.GridBagLayout());

        jTextField1136.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1136CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel26.add(jTextField1136, gridBagConstraints);

        jSearchTable26.setToolTipText("");
        jSearchTable26.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable26MouseClicked(evt);
            }
        });
        jSearchScrollPane26.setViewportView(jSearchTable26);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel26.add(jSearchScrollPane26, gridBagConstraints);

        jButton526.setText("Close");
        jButton526.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton526ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jSearchPanel26.add(jButton526, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog26.getContentPane().add(jSearchPanel26, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("STOCK ITEMS REGISTRATION");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnclose.setText("CLOSE");
        btnclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(btnclose, gridBagConstraints);

        btnreset.setText("RESET");
        btnreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnresetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(btnreset, gridBagConstraints);

        btnsave.setText("SAVE");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(btnsave, gridBagConstraints);

        btnedit.setText("EDIT");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(btnedit, gridBagConstraints);

        btnupdate.setText("UPDATE");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(btnupdate, gridBagConstraints);

        jButton1.setText("REMOVE ROW");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        cardPanelController.setLayout(new java.awt.CardLayout());

        card2.setLayout(new java.awt.GridBagLayout());

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Name", "Buying Price", "Discount", "Supplier", "Category", "Date Registered", "Receiving Department", "Minimum Stock Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jXTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jXTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);
        javax.swing.table.TableColumn dateEditor = jXTable1.getColumnModel().getColumn(5);
        DateCellEditor dateCellEditor = new DateCellEditor(new DatePicker(), jXTable1);
        dateEditor.setCellEditor(dateCellEditor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        card2.add(jScrollPane1, gridBagConstraints);

        cardPanelController.add(card2, "card2");

        card3.setLayout(new java.awt.GridBagLayout());

        jXTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Name", "Buying Price", "Discount", "Supplier Name", "Category", "Date Registered", "Receiving Department", "minimum stock count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable2MouseClicked(evt);
            }
        });
        jXTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jXTable2KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jXTable2);
        javax.swing.table.TableColumn dateEditor2 = jXTable2.getColumnModel().getColumn(6);
        DateCellEditor dateCellEditor2 = new DateCellEditor(new DatePicker(), jXTable2);
        dateEditor2.setCellEditor(dateCellEditor2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        card3.add(jScrollPane2, gridBagConstraints);

        cardPanelController.add(card3, "card3");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(cardPanelController, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        validateSavingData();
   
    }//GEN-LAST:event_btnsaveActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        
        if(jXTable1.getSelectedColumn()==3){
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog22.setSize(400,200);
        jSearchDialog22.setLocation(point);
        jSearchDialog22.show();
        }
        if(jXTable1.getSelectedColumn()==4){
        kiwi.ui.DateChooser date=new kiwi.ui.DateChooser();
        date.setVisible(true);
        }
        
        if(jXTable1.getSelectedColumn()==6){
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog25.setSize(400,200);
        jSearchDialog25.setLocation(point);
        jSearchDialog25.show();
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    private void jTextField1132CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1132CaretUpdate
        if(jTextField1132.getCaretPosition()>3){
        jSearchTable22.setModel(TableModel.createTableVectors(con, "select supplier_id, supplier_names from stock_suppliers where supplier_names ilike '%"+jTextField1132.getText()+"%' "));
        jSearchScrollPane22.setViewportView(jSearchTable22);
        }
    }//GEN-LAST:event_jTextField1132CaretUpdate

    private void jSearchTable22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable22MouseClicked
        jXTable1.setValueAt(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 0), jXTable1.getSelectedRow() ,3);
        jSearchDialog22.dispose();
    }//GEN-LAST:event_jSearchTable22MouseClicked

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed
        jSearchDialog22.dispose();
    }//GEN-LAST:event_jButton522ActionPerformed

    private void btnresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnresetActionPerformed
        resetDetails();
    }//GEN-LAST:event_btnresetActionPerformed

    private void btncloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btncloseActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
        this.btnedit.setVisible(false);
        btnupdate.setVisible(true);
        btnsave.setEnabled(false);
        resetDetails();
        if(!cardPanelController.isShowing()){
            cardPanelController.setVisible(true);        
        }
        
        CardLayout cl=(CardLayout)(cardPanelController.getLayout());
        cl.show(cardPanelController, "card3");

    }//GEN-LAST:event_btneditActionPerformed
    private void validateUpdatingData(){
    
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 0)==null){
    JOptionPane.showMessageDialog(this, "Please input the name", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 1)==null){
    JOptionPane.showMessageDialog(this, "Please input the buying price", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 2)==null){
    JOptionPane.showMessageDialog(this, "Please input the discount", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 3)==null){
    JOptionPane.showMessageDialog(this, "Please input the supplier name", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 4)==null){
    JOptionPane.showMessageDialog(this, "Please input the category", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 5)==null){
    JOptionPane.showMessageDialog(this, "Please input the registration date", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 6)==null){
    JOptionPane.showMessageDialog(this, "Please input the receiving department", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable2.getValueAt(jXTable2.getSelectedRow(), 7)==null){
    JOptionPane.showMessageDialog(this, "Please input the minimum stock count", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    
    updatingData();
    }
    private void updatingData(){
        int count=0;
        try {
            con.setAutoCommit(false);
            Statement st=con.createStatement();
            ResultSet rs=st.executeQuery("select count(item_code) from stock_items where item_code='"+jXTable2.getValueAt(jXTable2.getSelectedRow(), 0).toString()+"' ");
            while(rs.next()){
            count=rs.getInt(1);
            }
            if(count>0){
            PreparedStatement pr=null;
            
            for(int i=0;i<jXTable2.getRowCount();i++){
                String sql="UPDATE stock_items   SET item_name=?, buying_price=?::numeric(10, 2), discount=?::numeric(10, 2),    supplier_id=?, category=?, date_registered=?::date, receiving_department=?, min_stock_count=?::int WHERE item_code='"+jXTable2.getValueAt(i, 0)+"'";
           pr=con.prepareStatement(sql);
           if(jXTable2.getModel().getValueAt(i, 0)!=null){
            pr.setObject(1, jXTable2.getValueAt(i, 1).toString());
            pr.setObject(2, jXTable2.getValueAt(i, 2).toString());
            pr.setObject(3, jXTable2.getValueAt(i, 3).toString());
            pr.setObject(4, jXTable2.getValueAt(i, 4).toString());
            pr.setObject(5, jXTable2.getValueAt(i, 5).toString());
            pr.setObject(6, jXTable2.getValueAt(i, 6).toString());
            pr.setObject(7, jXTable2.getValueAt(i, 7).toString());
            pr.setObject(8, jXTable2.getValueAt(i, 8).toString());
            pr.executeUpdate();
            }
            }
            
            con.commit();
            con.setAutoCommit(true);
            if(pr!=null){
            JOptionPane.showMessageDialog(this, "Update is Successful");
            for(int i=0;i<jXTable2.getRowCount();i++){
            for(int r=0;r<jXTable2.getColumnCount();r++){
            jXTable2.setValueAt(null, i, r);
            }
            }
            }
            }
            else{
            JOptionPane.showMessageDialog(this, "You cannot update an item that does not exist");
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockItemsRegIntfr.class.getName()).log(Level.SEVERE, null, ex);
            try {
                con.rollback();
            } catch (SQLException ex1) {
                Logger.getLogger(StockItemsRegIntfr.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    private void jXTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable2MouseClicked
        if(jXTable2.getSelectedColumn()==0){
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog23.setSize(400,200);
        jSearchDialog23.setLocation(point);
        jSearchDialog23.show();
        }
        if(jXTable2.getSelectedColumn()==1){
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog23.setSize(400,200);
        jSearchDialog23.setLocation(point);
        jSearchDialog23.show();
        }
        if(jXTable2.getSelectedColumn()==4){
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog24.setSize(400,200);
        jSearchDialog24.setLocation(point);
        jSearchDialog24.show();
        }
        if(jXTable2.getSelectedColumn()==6){
        kiwi.ui.DateChooserField date=new kiwi.ui.DateChooserField();
        date.setVisible(true);
        }
         if(jXTable2.getSelectedColumn()==7){
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog26.setSize(400,200);
        jSearchDialog26.setLocation(point);
        jSearchDialog26.show();
        }
    }//GEN-LAST:event_jXTable2MouseClicked

    private void jTextField1133CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1133CaretUpdate
        if(jTextField1133.getCaretPosition()>3){
        jSearchTable23.setModel(TableModel.createTableVectors(con, "select item_code, item_name from stock_items where item_name ilike '%"+jTextField1133.getText()+"%' "));
        jSearchScrollPane23.setViewportView(jSearchTable23);
        }
    }//GEN-LAST:event_jTextField1133CaretUpdate

    private void jSearchTable23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable23MouseClicked
        jXTable2.setValueAt(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 0), jXTable2.getSelectedRow(), 0);
        jXTable2.setValueAt(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 1), jXTable2.getSelectedRow(), 1);
        jSearchDialog23.dispose();
        try {
            Statement st=con.createStatement();
            ResultSet rs=st.executeQuery("select buying_price, discount, supplier_id, category, date_registered, receiving_department, min_stock_count from stock_items where item_code ='"+jXTable2.getValueAt(jXTable2.getSelectedRow(), 0)+"' ");
            while(rs.next()){
            jXTable2.setValueAt(rs.getObject(1), jXTable2.getSelectedRow(), 2);
            jXTable2.setValueAt(rs.getObject(2), jXTable2.getSelectedRow(), 3);
            jXTable2.setValueAt(rs.getObject(3), jXTable2.getSelectedRow(), 4);
            jXTable2.setValueAt(rs.getObject(4), jXTable2.getSelectedRow(), 5);
            jXTable2.setValueAt(rs.getObject(5), jXTable2.getSelectedRow(), 6);
            jXTable2.setValueAt(rs.getObject(6), jXTable2.getSelectedRow(), 7);
            jXTable2.setValueAt(rs.getObject(7), jXTable2.getSelectedRow(), 8);
            }
            /*for(int i=0;i<jSearchTable23.getRowCount();i++){
                for(int r=0;jSearchTable23.getColumnCount();r++){
            jSearchTable23.setValueAt(null, i, r);
                }
            }*/
        } catch (SQLException ex) {
            Logger.getLogger(StockItemsRegIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSearchTable23MouseClicked

    private void jButton523ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton523ActionPerformed
        jSearchDialog23.dispose();
    }//GEN-LAST:event_jButton523ActionPerformed

    private void jTextField1134CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1134CaretUpdate
        if(jTextField1134.getCaretPosition()>3){
        jSearchTable24.setModel(TableModel.createTableVectors(con, "select supplier_id, supplier_names from stock_suppliers where supplier_names ilike '%"+jTextField1134.getText()+"%' "));
        jSearchScrollPane24.setViewportView(jSearchTable24);
        }
    }//GEN-LAST:event_jTextField1134CaretUpdate

    private void jSearchTable24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable24MouseClicked
        jXTable2.setValueAt(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 0), jXTable2.getSelectedRow() ,4);
        jSearchDialog24.dispose();
    }//GEN-LAST:event_jSearchTable24MouseClicked

    private void jButton524ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton524ActionPerformed
        jSearchDialog24.dispose();
    }//GEN-LAST:event_jButton524ActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
                validateUpdatingData();
    }//GEN-LAST:event_btnupdateActionPerformed

    private void jTextField1135CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1135CaretUpdate
        if(jTextField1135.getCaretPosition()>2){
        jSearchTable25.setModel(TableModel.createTableVectors(con, "select department_id, department_name from departments where department_name ilike'%"+jTextField1135.getText()+"%' "));
        jSearchScrollPane25.setViewportView(jSearchTable25);
        }
    }//GEN-LAST:event_jTextField1135CaretUpdate

    private void jSearchTable25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable25MouseClicked
        jXTable1.setValueAt(jSearchTable25.getValueAt(jSearchTable25.getSelectedRow(), 0), jXTable1.getSelectedRow(), 6);
        jSearchDialog25.dispose();
    }//GEN-LAST:event_jSearchTable25MouseClicked

    private void jButton525ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton525ActionPerformed
        jSearchDialog25.dispose();
    }//GEN-LAST:event_jButton525ActionPerformed

    private void jTextField1136CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1136CaretUpdate
            if(jTextField1136.getCaretPosition()>2){
            jSearchTable26.setModel(TableModel.createTableVectors(con, "select department_id, department_name from departments where department_name ilike '%"+jTextField1136.getText()+"%'"));
            jSearchScrollPane26.setViewportView(jSearchTable26);
            }
    }//GEN-LAST:event_jTextField1136CaretUpdate

    private void jSearchTable26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable26MouseClicked
        jXTable2.setValueAt(jSearchTable26.getValueAt(jSearchTable26.getSelectedRow(), 0), jXTable2.getSelectedRow(), 7);
        jSearchDialog26.dispose();
    }//GEN-LAST:event_jSearchTable26MouseClicked

    private void jButton526ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton526ActionPerformed
        jSearchDialog26.dispose();
    }//GEN-LAST:event_jButton526ActionPerformed

    private void jXTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXTable1KeyReleased
        if(jXTable1.getSelectedColumn()==1){
        Character ch=evt.getKeyChar();
        if(Character.isAlphabetic(ch)){
        JOptionPane.showMessageDialog(this, "Price cannot contain alphabet characters");
        jXTable1.setValueAt(null, jXTable1.getSelectedRow(), 1);
        }
        }
        if(jXTable1.getSelectedColumn()==2){
        Character ch=evt.getKeyChar();
        if(Character.isAlphabetic(ch)){
        JOptionPane.showMessageDialog(this, "Discount cannot contain alphabet characters");
        jXTable1.setValueAt(null, jXTable1.getSelectedRow(), 2);
        }
        }
    }//GEN-LAST:event_jXTable1KeyReleased

    private void jXTable2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXTable2KeyReleased
        if(jXTable2.getSelectedColumn()==2){
        Character ch=evt.getKeyChar();
        if(Character.isAlphabetic(ch)){
        JOptionPane.showMessageDialog(this, "Price cannot contain alphabet characters");
        jXTable2.setValueAt(null, jXTable2.getSelectedRow(), 2);
        }
        }
        if(jXTable2.getSelectedColumn()==3){
        Character ch=evt.getKeyChar();
        if(Character.isAlphabetic(ch)){
        JOptionPane.showMessageDialog(this, "Discount cannot contain alphabet characters");
        jXTable2.setValueAt(null, jXTable2.getSelectedRow(), 3);
        }
        }
    }//GEN-LAST:event_jXTable2KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                int rows2Delete = jXTable1.getSelectedRowCount();
        
        int[] selectedRows = jXTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        }
        else if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jXTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
            }
        else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jXTable1.getModel();
                
                defTableModel.removeRow(jXTable1.getSelectedRow());
            }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void validateSavingData(){
    
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 0)==null){
    JOptionPane.showMessageDialog(this, "Please input the item name", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 1)==null){
    JOptionPane.showMessageDialog(this, "Please input the buying price", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 2)==null){
    JOptionPane.showMessageDialog(this, "Please input the item discount", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 3)==null){
    JOptionPane.showMessageDialog(this, "Please input the supplier name", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 4)==null){
    JOptionPane.showMessageDialog(this, "Please input the item category", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 5)==null){
    JOptionPane.showMessageDialog(this, "Please input the item's registration date", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 6)==null){
    JOptionPane.showMessageDialog(this, "Please input the receiving department", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    if(jXTable1.getValueAt(jXTable1.getSelectedRow(), 7)==null){
    JOptionPane.showMessageDialog(this, "Please input the minimum stock count", "Missing variable", JOptionPane.INFORMATION_MESSAGE);
    return;
    }
    insertDetails();
    }
    private void insertDetails(){
    PreparedStatement pr=null;
    String sql=null;
    String itemCode=null;
        try {
            con.setAutoCommit(false);
            
            
            sql="INSERT INTO stock_items(item_code, item_name, buying_price, discount,  supplier_id, category, date_registered, receiving_department, min_stock_count)"
                    + "VALUES (?, ?, ?::numeric(10, 2), ?::numeric(10, 2), ?,  ?, ?::date, ?, ?::int)";
            pr=con.prepareStatement(sql);
            
            for(int i=0;i<jXTable1.getRowCount();i++){
                ResultSet rs=SQLHelper.getResultset(con, "select 'ITM'|| nextval ('item_no_seq')");
            while(rs.next()){
            itemCode=rs.getString(1);
            }
                    pr.setString(1, itemCode);
                if (jXTable1.getModel().getValueAt(i,0) != null){
                    pr.setObject(2, jXTable1.getValueAt(i, 0).toString());
                    pr.setObject(3, jXTable1.getValueAt(i, 1).toString());
                    pr.setObject(4, jXTable1.getValueAt(i, 2).toString());
                    pr.setObject(5, jXTable1.getValueAt(i, 3).toString());
                    pr.setObject(6, jXTable1.getValueAt(i, 4).toString());
                    pr.setObject(7, jXTable1.getValueAt(i, 5).toString());
                    pr.setObject(8, jXTable1.getValueAt(i, 6).toString());
                    pr.setObject(9, jXTable1.getValueAt(i, 7).toString());
                    pr.executeUpdate();
                }
            }
            con.commit();
            con.setAutoCommit(true);
            if(pr!=null){
            JOptionPane.showMessageDialog(this, "Insert is successful");
            resetDetails();
            }
        } catch (SQLException ex) {
            Logger.getLogger(StockItemsRegIntfr.class.getName()).log(Level.SEVERE, null, ex);
        try {
            con.rollback();
        } catch (SQLException ex1) {
            Logger.getLogger(StockItemsRegIntfr.class.getName()).log(Level.SEVERE, null, ex1);
        }
        }
    }
    
    private void resetDetails(){
    for(int i=0;i<jXTable1.getRowCount();i++){
        for(int j=0;j<jXTable1.getColumnCount();j++){
            jXTable1.setValueAt(null, i, j);
        }
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclose;
    private javax.swing.JButton btnedit;
    private javax.swing.JButton btnreset;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnupdate;
    private javax.swing.JPanel card2;
    private javax.swing.JPanel card3;
    private javax.swing.JPanel cardPanelController;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton522;
    private javax.swing.JButton jButton523;
    private javax.swing.JButton jButton524;
    private javax.swing.JButton jButton525;
    private javax.swing.JButton jButton526;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog22;
    private javax.swing.JDialog jSearchDialog23;
    private javax.swing.JDialog jSearchDialog24;
    private javax.swing.JDialog jSearchDialog25;
    private javax.swing.JDialog jSearchDialog26;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JPanel jSearchPanel23;
    private javax.swing.JPanel jSearchPanel24;
    private javax.swing.JPanel jSearchPanel25;
    private javax.swing.JPanel jSearchPanel26;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JScrollPane jSearchScrollPane23;
    private javax.swing.JScrollPane jSearchScrollPane24;
    private javax.swing.JScrollPane jSearchScrollPane25;
    private javax.swing.JScrollPane jSearchScrollPane26;
    private javax.swing.JTable jSearchTable22;
    private javax.swing.JTable jSearchTable23;
    private javax.swing.JTable jSearchTable24;
    private javax.swing.JTable jSearchTable25;
    private javax.swing.JTable jSearchTable26;
    private javax.swing.JTextField jTextField1132;
    private javax.swing.JTextField jTextField1133;
    private javax.swing.JTextField jTextField1134;
    private javax.swing.JTextField jTextField1135;
    private javax.swing.JTextField jTextField1136;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXTable jXTable2;
    // End of variables declaration//GEN-END:variables
}
